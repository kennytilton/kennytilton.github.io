["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$c-md-name","~$tiltontec.cell.base","~$cinfo","^4","~$set-ify","~$tiltontec.util.core","~$*quiesce*","^4","~$*unfinished-business*","^4","~$*pulse*","^4","~$c-input?","^4","~$c-synaptic?","^4","~$dependency-record","^4","~$pcell","^4","~$c-value-state","^4","~$c-optimized-away?","^4","~$minfo","^4","~$c-current?","~$tiltontec.cell.integrity","~$dpc","^4","~$c-optimize","^4","~$*one-pulse?*","^4","~$c-valid?","^4","~$any-ref?","^7","~$unlink-from-used","^4","~$*causation*","^4","~$*defer-changes*","^4","~$c-pulse","^4","~$wtrx","~$tiltontec.util.base","~$c-pulse-last-changed","^4","~$c-prop-name","^4","~$*dp-log*","^4","~$md-ref?","^4","~$rmap-meta-setf","^7","~$c-value","^4","~$*custom-propagator*","^4","~$with-integrity","^C","~$mx-type","^N","~$c-pulse-unwatched?","^4","~$mdead?","^4","~$err","^7","~$c-callers","^4","~$c-ephemeral?","^4","~$c-ref?","^4","~$c-prop","^4","~$c-model","^4","~$md-prop-owning?","^4","~$c-async?","^4","~$dependency-drop","^4","~$c-rule","^4","~$unlink-from-callers","^4","~$c-code$","^4","~$c-formula?","^4","~$c-me","^4","~$c-lazy","^4","~$difference","~$clojure.set","~$trx","^N","~$c-pulse-watched","^4","~$c-useds","^4","~$*call-stack*","^4","~$*c-prop-depth*","^4","~$c-pulse-update","^C","~$c-unbound?","^4","~$without-c-dependency","^4","~$*depender*","^4","~$rmap-setf","^7","~$prog1","^N","~$c-state","^4"],"~:excludes",["~#set",[]],"~:name","~$tiltontec.cell.evaluate","~:imports",null,"~:requires",["^ ","^4","^4","^7","^7","~$cty","^4","^1>","^1>","~$tiltontec.cell.watch","^1R","~$cljs.pprint","^1S","^N","^N","^C","^C","~$str","~$clojure.string","^1U","^1U"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^3","^4","^5","^4","^6","^7","^8","^4","~$pprint","^1S","^9","^4","^:","^4","^;","^4","^<","^4","^=","^4","^?","^4","^@","^4","~$c-watch","^1R","^A","^4","^B","^C","^D","^4","^E","^4","^F","^4","^G","^4","^H","^7","^I","^4","^J","^4","^K","^4","^L","^4","^O","^4","^P","^4","^Q","^4","^R","^4","^S","^7","^T","^4","^U","^4","^W","^N","^X","^4","^Y","^4","^Z","^7","^[","^4","~$cl-format","^1S","^10","^4","^11","^4","^12","^4","^13","^4","^14","^4","^15","^4","^16","^4","^17","^4","^18","^4","^19","^4","^1:","^4","^1;","^4","^1<","^4","^1=","^1>","^1@","^4","^1A","^4","^1B","^4","^1C","^4","^1D","^C","^1E","^4","^1G","^4","^1H","^7","^1J","^4"],"~:defs",["^ ","~$md-prop-value-store",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","~:line",298,"~:column",7,"~:end-line",298,"~:end-column",26,"~:arglists",["~#list",["~$quote",["^29",[["~$me","~$prop","~$value"]]]]]],"^1M","~$tiltontec.cell.evaluate/md-prop-value-store","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",26,"~:method-params",["^29",[["^2;","^2<","^2="]]],"~:protocol-impl",null,"~:arglists-meta",["^29",[null,null]],"^25",1,"~:variadic?",false,"^24",298,"~:ret-tag","~$any","^26",298,"~:max-fixed-arity",3,"~:fn-var",true,"^28",["^29",["^2:",["^29",[["^2;","^2<","^2="]]]]]],"~$md-prop-cell-flushed",["^ ","^1M","~$tiltontec.cell.evaluate/md-prop-cell-flushed","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",463,"^25",1,"^26",465,"^27",23,"~:declared",true,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",465,"^25",3,"^26",465,"^27",23,"^2I",true]],"~$calculate-and-set",["^ ","^21",null,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",167,"^25",7,"^26",167,"^27",24,"^28",["^29",["^2:",["^29",[["~$c","~$dbgid","~$dbgdata"]]]]],"~:doc","Calculate, link, record, and propagate."],"^1M","~$tiltontec.cell.evaluate/calculate-and-set","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",24,"^2?",["^29",[["~$c","^2K","^2L"]]],"^2@",null,"^2A",["^29",[null,null]],"^25",1,"^2B",false,"^24",167,"^2C",["^1L",["^2D","~$clj-nil"]],"^26",167,"^2E",3,"^2F",true,"^28",["^29",["^2:",["^29",[["~$c","^2K","^2L"]]]]],"^2M","Calculate, link, record, and propagate."],"~$c-quiesce",["^ ","^21",null,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",414,"^25",7,"^26",414,"^27",16,"^28",["^29",["^2:",["^29",[["~$c"]]]]]],"^1M","~$tiltontec.cell.evaluate/c-quiesce","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",16,"^2?",["^29",[["~$c"]]],"^2@",null,"^2A",["^29",[null,null]],"^25",1,"^2B",false,"^24",414,"^2C",["^1L",[null,"^2D"]],"^26",414,"^2E",1,"^2F",true,"^28",["^29",["^2:",["^29",[["~$c"]]]]]],"~$c-absorb-value",["^ ","^1M","~$tiltontec.cell.evaluate/c-absorb-value","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",293,"^25",1,"^26",293,"^27",24,"^2I",true,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",293,"^25",10,"^26",293,"^27",24,"^2I",true]],"~$unchanged-test",["^ ","^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",444,"^25",11,"^26",444,"^27",25,"^2M","Cells does not propagate when nothing changes. By default, the\n  test is =, but cells can inject a different test, and when we get\n  to models it will be possible for a prop to have associated\n  with it a different test."],"^1M","~$tiltontec.cell.evaluate/unchanged-test","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",25,"^25",1,"^24",444,"^26",444,"~:tag","~$cljs.core/MultiFn","^2M","Cells does not propagate when nothing changes. By default, the\n  test is =, but cells can inject a different test, and when we get\n  to models it will be possible for a prop to have associated\n  with it a different test."],"~$ephemeral-reset",["^ ","^21",null,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",41,"^25",7,"^26",41,"^27",22,"^28",["^29",["^2:",["^29",[["~$rc"]]]]]],"^1M","~$tiltontec.cell.evaluate/ephemeral-reset","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",22,"^2?",["^29",[["^2Y"]]],"^2@",null,"^2A",["^29",[null,null]],"^25",1,"^2B",false,"^24",41,"^2C",["^1L",[null,"^2D","~$cljs.core/Keyword","^2O"]],"^26",41,"^2E",1,"^2F",true,"^28",["^29",["^2:",["^29",[["^2Y"]]]]]],"~$md-quiesce-self",["^ ","^21",null,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",424,"^25",7,"^26",424,"^27",22,"^28",["^29",["^2:",["^29",[["^2;"]]]]]],"^1M","~$tiltontec.cell.evaluate/md-quiesce-self","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",22,"^2?",["^29",[["^2;"]]],"^2@",null,"^2A",["^29",[null,null]],"^25",1,"^2B",false,"^24",424,"^2C","^2D","^26",424,"^2E",1,"^2F",true,"^28",["^29",["^2:",["^29",[["^2;"]]]]]],"~$optimize-away?!",["^ ","^21",null,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",378,"^25",7,"^26",378,"^27",22,"^28",["^29",["^2:",["^29",[["~$c","~$prior-value"]]]]],"^2M","Optimizes away cells who turn out not to depend on anyone, \n  saving a lot of work at runtime. A caller/user will not bother\n  establishing a link, and when we get to models cget will \n  find a non-cell in a prop and Just Use It."],"^1M","~$tiltontec.cell.evaluate/optimize-away?!","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",22,"^2?",["^29",[["~$c","^33"]]],"^2@",null,"^2A",["^29",[null,null]],"^25",1,"^2B",false,"^24",378,"^2C",["^1L",[null,"^2D","^2O"]],"^26",378,"^2E",2,"^2F",true,"^28",["^29",["^2:",["^29",[["~$c","^33"]]]]],"^2M","Optimizes away cells who turn out not to depend on anyone, \n  saving a lot of work at runtime. A caller/user will not bother\n  establishing a link, and when we get to models cget will \n  find a non-cell in a prop and Just Use It."],"~$ensure-value-is-current",["^ ","^21",null,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",60,"^25",7,"^26",60,"^27",30,"^28",["^29",["^2:",["^29",[["~$c","~$debug-id","~$ensurer"]]]]],"^2M","The key to data integrity: recursively check the known dependency\n  graph to decide if we are current, and if not kick off recalculation\n  and propagation."],"^1M","~$tiltontec.cell.evaluate/ensure-value-is-current","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",30,"^2?",["^29",[["~$c","^36","^37"]]],"^2@",null,"^2A",["^29",[null,null]],"^25",1,"^2B",false,"^24",60,"^2C",["^1L",["^2D","^2O"]],"^26",60,"^2E",3,"^2F",true,"^28",["^29",["^2:",["^29",[["~$c","^36","^37"]]]]],"^2M","The key to data integrity: recursively check the known dependency\n  graph to decide if we are current, and if not kick off recalculation\n  and propagation."],"~$propagate",["^ ","^21",null,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",467,"^25",7,"^26",467,"^27",16,"^28",["^29",["^2:",["^29",[["~$c","^33","~$callers"]]]]],"^2M","A cell:\n  - notifies its callers of its change;\n  - calls any watch; and\n  - if ephemeral, silently reverts to nil."],"^1M","~$tiltontec.cell.evaluate/propagate","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",16,"^2?",["^29",[["~$c","^33","^3:"]]],"^2@",null,"^2A",["^29",[null,null]],"^25",1,"^2B",false,"^24",467,"^2C",["^1L",[null,"^2D","^2O"]],"^26",467,"^2E",3,"^2F",true,"^28",["^29",["^2:",["^29",[["~$c","^33","^3:"]]]]],"^2M","A cell:\n  - notifies its callers of its change;\n  - calls any watch; and\n  - if ephemeral, silently reverts to nil."],"~$md-cell-flush",["^ ","^21",null,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",367,"^25",7,"^26",367,"^27",20,"^28",["^29",["^2:",["^29",[["~$c"]]]]]],"^1M","~$tiltontec.cell.evaluate/md-cell-flush","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",20,"^2?",["^29",[["~$c"]]],"^2@",null,"^2A",["^29",[null,null]],"^25",1,"^2B",false,"^24",367,"^2C",["^1L",["^2D","^2O"]],"^26",367,"^2E",1,"^2F",true,"^28",["^29",["^2:",["^29",[["~$c"]]]]]],"~$c-awaken",["^ ","^1M","~$tiltontec.cell.evaluate/c-awaken","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",256,"^25",1,"^26",256,"^27",19,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",256,"^25",11,"^26",256,"^27",19],"^2V","^2W"],"~$c-get",["^ ","^21",null,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",124,"^25",7,"^26",124,"^27",12,"^28",["^29",["^2:",["^29",[["~$c"]]]]],"^2M","The API for determing the value associated with a Cell.\n  Ensures value is current, records any dependent, and\n  notices if a standalone  cell has never been watched."],"^1M","~$tiltontec.cell.evaluate/c-get","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",12,"^2?",["^29",[["~$c"]]],"^2@",null,"^2A",["^29",[null,null]],"^25",1,"^2B",false,"^24",124,"^2C",["^1L",[null,"^2D","^2["]],"^26",124,"^2E",1,"^2F",true,"^28",["^29",["^2:",["^29",[["~$c"]]]]],"^2M","The API for determing the value associated with a Cell.\n  Ensures value is current, records any dependent, and\n  notices if a standalone  cell has never been watched."],"~$c-value-assume",["^ ","^21",null,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",304,"^25",7,"^26",304,"^27",21,"^28",["^29",["^2:",["^29",[["~$c","~$new-value","~$propagation-code"]]]]],"^2M","The Cell assumes a new value at awakening, on c-reset!, or\n   after formula recalculation.\n\n  We record the new value, set the Cell state to :awake, make\n  its pulse current, check to see if a formula cell can be\n  optimized away, and then propagate to any dependent formula\n  cells."],"^1M","~$tiltontec.cell.evaluate/c-value-assume","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",21,"^2?",["^29",[["~$c","^3C","^3D"]]],"^2@",null,"^2A",["^29",[null,null]],"^25",1,"^2B",false,"^24",304,"^26",304,"^2E",3,"^2F",true,"^28",["^29",["^2:",["^29",[["~$c","^3C","^3D"]]]]],"^2M","The Cell assumes a new value at awakening, on c-reset!, or\n   after formula recalculation.\n\n  We record the new value, set the Cell state to :awake, make\n  its pulse current, check to see if a formula cell can be\n  optimized away, and then propagate to any dependent formula\n  cells."],"~$<cget",["^ ","^21",null,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",161,"^25",7,"^26",161,"^27",12,"^28",["^29",["^2:",["^29",[["~$c"]]]]]],"^1M","~$tiltontec.cell.evaluate/<cget","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",12,"^2?",["^29",[["~$c"]]],"^2@",null,"^2A",["^29",[null,null]],"^25",1,"^2B",false,"^24",161,"^2C",["^1L",[null,"^2D","^2["]],"^26",161,"^2E",1,"^2F",true,"^28",["^29",["^2:",["^29",[["~$c"]]]]]],"~$calculate-and-link",["^ ","^21",null,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",214,"^25",7,"^26",214,"^27",25,"^28",["^29",["^2:",["^29",[["~$c"]]]]],"^2M","The name is accurate: we do no more than invoke the\n  rule of a formula and return its value*, but along the\n  way the links between dependencies and dependents get\n  determined anew.\n\n  * Well, we also look to see if a synaptic cell has attached a\n  propagaion code to a vector used to wrap the raw value, which we then unpack."],"^1M","~$tiltontec.cell.evaluate/calculate-and-link","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",25,"^2?",["^29",[["~$c"]]],"^2@",null,"^2A",["^29",[null,null]],"^25",1,"^2B",false,"^24",214,"^26",214,"^2E",1,"^2F",true,"^28",["^29",["^2:",["^29",[["~$c"]]]]],"^2M","The name is accurate: we do no more than invoke the\n  rule of a formula and return its value*, but along the\n  way the links between dependencies and dependents get\n  determined anew.\n\n  * Well, we also look to see if a synaptic cell has attached a\n  propagaion code to a vector used to wrap the raw value, which we then unpack."],"~$c-value-changed?",["^ ","^21",null,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",456,"^25",7,"^26",456,"^27",23,"^28",["^29",["^2:",["^29",[["~$c","^3C","~$old-value"]]]]]],"^1M","~$tiltontec.cell.evaluate/c-value-changed?","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",23,"^2?",["^29",[["~$c","^3C","^3K"]]],"^2@",null,"^2A",["^29",[null,null]],"^25",1,"^2B",false,"^24",456,"^2C","~$boolean","^26",456,"^2E",3,"^2F",true,"^28",["^29",["^2:",["^29",[["~$c","^3C","^3K"]]]]]],"~$propagate-to-callers",["^ ","^21",null,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",525,"^25",7,"^26",525,"^27",27,"^28",["^29",["^2:",["^29",[["~$c","^3:"]]]]]],"^1M","~$tiltontec.cell.evaluate/propagate-to-callers","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^27",27,"^2?",["^29",[["~$c","^3:"]]],"^2@",null,"^2A",["^29",[null,null]],"^25",1,"^2B",false,"^24",525,"^2C",["^1L",[null,"^2D","^2[","^2O"]],"^26",525,"^2E",2,"^2F",true,"^28",["^29",["^2:",["^29",[["~$c","^3:"]]]]]],"~$md-quiesce",["^ ","^1M","~$tiltontec.cell.evaluate/md-quiesce","^23","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",434,"^25",1,"^26",434,"^27",21,"^22",["^ ","^23","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^24",434,"^25",11,"^26",434,"^27",21],"^2V","^2W"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^1S","^1S","^N","^N","^1Q","^4","^4","^4","^C","^C"],"~:cljs.analyzer/constants",["^ ","~:seen",["^1L",["~:valid","~:optimized-away","~:awake","~:c-read","~:cells-flushed","~:cz","~:pre-rule-clear","~:ephemeral-reset","~:dead","~:freeze","~:opti-used","~:else","~:unchanged-if","~:no-propagate","~:uncurrent","~:quiesced","~:on-quiesce","~:default","~:c-awaken-def!!!","~:c-awaken-fall-thru","~:propagate","~:nested","~:value","~:fn-c-awaken","~:nascent","~:evic","~:ref-of","~:tiltontec.cell.base/c-formula","~:pulse-last-changed","~:tell-dependents","~:tiltontec.cell.base/state","~:prop","~:unref","~:cget","~:quiesce!!!-def","~:tiltontec.cell.base/cell","~:quiesce","~:when-value-t","~:cell-awaken","~:dead-c","~:once-asked","~:me","~:hierarchy","~:opti-away","~:propv-assume","~:valid-uninfluenced","~:always"]],"~:order",["^41","^4S","^4I","^4@","^4O","^4?","^4C","^45","^4W","^3Y","^4B","^4H","^3X","^4K","^40","^4>","^4T","^4;","^4<","^4=","^4D","^4J","^4M","^4P","^4E","^4A","^4V","^4F","^3V","^48","^47","^3Z","^43","^3W","^4U","^3[","^44","^4:","^4N","^4Q","^42","^4L","^46","^4R","^4X","^4G","^49"]],"^2M",null]