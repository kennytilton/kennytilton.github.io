["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$c-md-name","~$tiltontec.cell.base","~$cinfo","^4","~$set-ify","~$tiltontec.util.core","~$*quiesce*","^4","~$*unfinished-business*","^4","~$*pulse*","^4","~$c-input?","^4","~$c-synaptic?","^4","~$c-pulse-unobserved?","^4","~$dependency-record","^4","~$pcell","^4","~$c-value-state","^4","~$c-optimized-away?","^4","~$minfo","^4","~$c-current?","~$tiltontec.cell.integrity","~$dpc","^4","~$c-optimize","^4","~$*one-pulse?*","^4","~$c-valid?","^4","~$any-ref?","^7","~$unlink-from-used","^4","~$*causation*","^4","~$*defer-changes*","^4","~$c-pulse","^4","~$wtrx","~$tiltontec.util.base","~$c-pulse-last-changed","^4","~$*dp-log*","^4","~$md-ref?","^4","~$rmap-meta-setf","^7","~$c-value","^4","~$*custom-propagator*","^4","~$with-integrity","^D","~$mx-type","^O","~$mdead?","^4","~$err","^7","~$c-callers","^4","~$c-ephemeral?","^4","~$c-ref?","^4","~$c-model","^4","~$c-pulse-observed","^4","~$c-slot","^4","~$dependency-drop","^4","~$c-rule","^4","~$unlink-from-callers","^4","~$c-code$","^4","~$c-formula?","^4","~$c-me","^4","~$c-lazy","^4","~$difference","~$clojure.set","~$c-slot-name","^4","~$trx","^O","~$md-slot-owning?","^4","~$c-useds","^4","~$*call-stack*","^4","~$*c-prop-depth*","^4","~$c-pulse-update","^D","~$c-unbound?","^4","~$without-c-dependency","^4","~$*depender*","^4","~$rmap-setf","^7","~$prog1","^O","~$c-state","^4"],"~:excludes",["~#set",[]],"~:name","~$tiltontec.cell.evaluate","~:imports",null,"~:requires",["^ ","~$tiltontec.cell.observer","^1P","^4","^4","^7","^7","~$cty","^4","^1<","^1<","~$cljs.pprint","^1R","^O","^O","^D","^D","~$str","~$clojure.string","^1T","^1T"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^3","^4","^5","^4","^6","^7","^8","^4","~$pprint","^1R","^9","^4","^:","^4","^;","^4","^<","^4","^=","^4","^>","^4","^@","^4","^A","^4","^B","^4","^C","^D","^E","^4","^F","^4","^G","^4","^H","^4","^I","^7","^J","^4","^K","^4","^L","^4","^M","^4","^P","^4","^Q","^4","^R","^4","^S","^7","^T","^4","^U","^4","^W","^O","^X","^4","^Y","^7","^Z","^4","~$cl-format","^1R","^[","^4","^10","^4","^11","^4","^12","^4","^13","^4","^14","^4","^15","^4","~$c-observe","^1P","^16","^4","^17","^4","^18","^4","^19","^4","^1:","^4","^1;","^1<","^1=","^4","^1?","^4","^1@","^4","^1A","^4","^1B","^4","^1C","^D","^1D","^4","^1F","^4","^1G","^7","^1I","^4"],"~:defs",["^ ","~$calculate-and-set",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","~:line",167,"~:column",7,"~:end-line",167,"~:end-column",24,"~:arglists",["~#list",["~$quote",["^28",[["~$c","~$dbgid","~$dbgdata"]]]]],"~:doc","Calculate, link, record, and propagate."],"^1L","~$tiltontec.cell.evaluate/calculate-and-set","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",24,"~:method-params",["^28",[["~$c","^2:","^2;"]]],"~:protocol-impl",null,"~:arglists-meta",["^28",[null,null]],"^24",1,"~:variadic?",false,"^23",167,"~:ret-tag",["^1K",["~$any","~$clj-nil"]],"^25",167,"~:max-fixed-arity",3,"~:fn-var",true,"^27",["^28",["^29",["^28",[["~$c","^2:","^2;"]]]]],"^2<","Calculate, link, record, and propagate."],"~$c-quiesce",["^ ","^20",null,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",383,"^24",7,"^25",383,"^26",16,"^27",["^28",["^29",["^28",[["~$c"]]]]]],"^1L","~$tiltontec.cell.evaluate/c-quiesce","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",16,"^2>",["^28",[["~$c"]]],"^2?",null,"^2@",["^28",[null,null]],"^24",1,"^2A",false,"^23",383,"^2B",["^1K",[null,"^2C"]],"^25",383,"^2E",1,"^2F",true,"^27",["^28",["^29",["^28",[["~$c"]]]]]],"~$c-absorb-value",["^ ","^1L","~$tiltontec.cell.evaluate/c-absorb-value","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",262,"^24",1,"^25",262,"^26",24,"~:declared",true,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",262,"^24",10,"^25",262,"^26",24,"^2K",true]],"~$md-slot-cell-flushed",["^ ","^1L","~$tiltontec.cell.evaluate/md-slot-cell-flushed","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",432,"^24",1,"^25",434,"^26",23,"^2K",true,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",434,"^24",3,"^25",434,"^26",23,"^2K",true]],"~$unchanged-test",["^ ","^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",413,"^24",11,"^25",413,"^26",25,"^2<","Cells does not propagate when nothing changes. By default, the\n  test is =, but cells can inject a different test, and when we get\n  to models it will be possible for a slot to have associated\n  with it a different test."],"^1L","~$tiltontec.cell.evaluate/unchanged-test","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",25,"^24",1,"^23",413,"^25",413,"~:tag","~$cljs.core/MultiFn","^2<","Cells does not propagate when nothing changes. By default, the\n  test is =, but cells can inject a different test, and when we get\n  to models it will be possible for a slot to have associated\n  with it a different test."],"~$ephemeral-reset",["^ ","^20",null,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",41,"^24",7,"^25",41,"^26",22,"^27",["^28",["^29",["^28",[["~$rc"]]]]]],"^1L","~$tiltontec.cell.evaluate/ephemeral-reset","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",22,"^2>",["^28",[["^2S"]]],"^2?",null,"^2@",["^28",[null,null]],"^24",1,"^2A",false,"^23",41,"^2B",["^1K",[null,"^2C","~$cljs.core/Keyword","^2D"]],"^25",41,"^2E",1,"^2F",true,"^27",["^28",["^29",["^28",[["^2S"]]]]]],"~$md-quiesce-self",["^ ","^20",null,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",393,"^24",7,"^25",393,"^26",22,"^27",["^28",["^29",["^28",[["~$me"]]]]]],"^1L","~$tiltontec.cell.evaluate/md-quiesce-self","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",22,"^2>",["^28",[["^2W"]]],"^2?",null,"^2@",["^28",[null,null]],"^24",1,"^2A",false,"^23",393,"^2B","^2C","^25",393,"^2E",1,"^2F",true,"^27",["^28",["^29",["^28",[["^2W"]]]]]],"~$optimize-away?!",["^ ","^20",null,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",347,"^24",7,"^25",347,"^26",22,"^27",["^28",["^29",["^28",[["~$c","~$prior-value"]]]]],"^2<","Optimizes away cells who turn out not to depend on anyone, \n  saving a lot of work at runtime. A caller/user will not bother\n  establishing a link, and when we get to models cget will \n  find a non-cell in a slot and Just Use It."],"^1L","~$tiltontec.cell.evaluate/optimize-away?!","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",22,"^2>",["^28",[["~$c","^2Z"]]],"^2?",null,"^2@",["^28",[null,null]],"^24",1,"^2A",false,"^23",347,"^2B",["^1K",[null,"^2C","^2D"]],"^25",347,"^2E",2,"^2F",true,"^27",["^28",["^29",["^28",[["~$c","^2Z"]]]]],"^2<","Optimizes away cells who turn out not to depend on anyone, \n  saving a lot of work at runtime. A caller/user will not bother\n  establishing a link, and when we get to models cget will \n  find a non-cell in a slot and Just Use It."],"~$ensure-value-is-current",["^ ","^20",null,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",60,"^24",7,"^25",60,"^26",30,"^27",["^28",["^29",["^28",[["~$c","~$debug-id","~$ensurer"]]]]],"^2<","The key to data integrity: recursively check the known dependency\n  graph to decide if we are current, and if not kick off recalculation\n  and propagation."],"^1L","~$tiltontec.cell.evaluate/ensure-value-is-current","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",30,"^2>",["^28",[["~$c","^31","^32"]]],"^2?",null,"^2@",["^28",[null,null]],"^24",1,"^2A",false,"^23",60,"^2B",["^1K",["^2C","^2D"]],"^25",60,"^2E",3,"^2F",true,"^27",["^28",["^29",["^28",[["~$c","^31","^32"]]]]],"^2<","The key to data integrity: recursively check the known dependency\n  graph to decide if we are current, and if not kick off recalculation\n  and propagation."],"~$propagate",["^ ","^20",null,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",436,"^24",7,"^25",436,"^26",16,"^27",["^28",["^29",["^28",[["~$c","^2Z","~$callers"]]]]],"^2<","A cell:\n  - notifies its callers of its change;\n  - calls any observer; and\n  - if ephemeral, silently reverts to nil."],"^1L","~$tiltontec.cell.evaluate/propagate","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",16,"^2>",["^28",[["~$c","^2Z","^35"]]],"^2?",null,"^2@",["^28",[null,null]],"^24",1,"^2A",false,"^23",436,"^2B",["^1K",[null,"^2C","^2D"]],"^25",436,"^2E",3,"^2F",true,"^27",["^28",["^29",["^28",[["~$c","^2Z","^35"]]]]],"^2<","A cell:\n  - notifies its callers of its change;\n  - calls any observer; and\n  - if ephemeral, silently reverts to nil."],"~$md-cell-flush",["^ ","^20",null,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",336,"^24",7,"^25",336,"^26",20,"^27",["^28",["^29",["^28",[["~$c"]]]]]],"^1L","~$tiltontec.cell.evaluate/md-cell-flush","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",20,"^2>",["^28",[["~$c"]]],"^2?",null,"^2@",["^28",[null,null]],"^24",1,"^2A",false,"^23",336,"^2B",["^1K",["^2C","^2D"]],"^25",336,"^2E",1,"^2F",true,"^27",["^28",["^29",["^28",[["~$c"]]]]]],"~$c-awaken",["^ ","^1L","~$tiltontec.cell.evaluate/c-awaken","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",225,"^24",1,"^25",225,"^26",19,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",225,"^24",11,"^25",225,"^26",19],"^2P","^2Q"],"~$c-get",["^ ","^20",null,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",124,"^24",7,"^25",124,"^26",12,"^27",["^28",["^29",["^28",[["~$c"]]]]],"^2<","The API for determing the value associated with a Cell.\n  Ensures value is current, records any dependent, and\n  notices if a standalone  cell has never been observed."],"^1L","~$tiltontec.cell.evaluate/c-get","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",12,"^2>",["^28",[["~$c"]]],"^2?",null,"^2@",["^28",[null,null]],"^24",1,"^2A",false,"^23",124,"^2B",["^1K",[null,"^2C","^2U"]],"^25",124,"^2E",1,"^2F",true,"^27",["^28",["^29",["^28",[["~$c"]]]]],"^2<","The API for determing the value associated with a Cell.\n  Ensures value is current, records any dependent, and\n  notices if a standalone  cell has never been observed."],"~$c-value-assume",["^ ","^20",null,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",273,"^24",7,"^25",273,"^26",21,"^27",["^28",["^29",["^28",[["~$c","~$new-value","~$propagation-code"]]]]],"^2<","The Cell assumes a new value at awakening, on c-reset!, or\n   after formula recalculation.\n\n  We record the new value, set the Cell state to :awake, make\n  its pulse current, check to see if a formula cell can be\n  optimized away, and then propagate to any dependent formula\n  cells."],"^1L","~$tiltontec.cell.evaluate/c-value-assume","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",21,"^2>",["^28",[["~$c","^3>","^3?"]]],"^2?",null,"^2@",["^28",[null,null]],"^24",1,"^2A",false,"^23",273,"^25",273,"^2E",3,"^2F",true,"^27",["^28",["^29",["^28",[["~$c","^3>","^3?"]]]]],"^2<","The Cell assumes a new value at awakening, on c-reset!, or\n   after formula recalculation.\n\n  We record the new value, set the Cell state to :awake, make\n  its pulse current, check to see if a formula cell can be\n  optimized away, and then propagate to any dependent formula\n  cells."],"~$md-slot-value-store",["^ ","^20",null,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",267,"^24",7,"^25",267,"^26",26,"^27",["^28",["^29",["^28",[["^2W","~$slot","~$value"]]]]]],"^1L","~$tiltontec.cell.evaluate/md-slot-value-store","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",26,"^2>",["^28",[["^2W","^3B","^3C"]]],"^2?",null,"^2@",["^28",[null,null]],"^24",1,"^2A",false,"^23",267,"^2B","^2C","^25",267,"^2E",3,"^2F",true,"^27",["^28",["^29",["^28",[["^2W","^3B","^3C"]]]]]],"~$<cget",["^ ","^20",null,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",161,"^24",7,"^25",161,"^26",12,"^27",["^28",["^29",["^28",[["~$c"]]]]]],"^1L","~$tiltontec.cell.evaluate/<cget","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",12,"^2>",["^28",[["~$c"]]],"^2?",null,"^2@",["^28",[null,null]],"^24",1,"^2A",false,"^23",161,"^2B",["^1K",[null,"^2C","^2U"]],"^25",161,"^2E",1,"^2F",true,"^27",["^28",["^29",["^28",[["~$c"]]]]]],"~$calculate-and-link",["^ ","^20",null,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",183,"^24",7,"^25",183,"^26",25,"^27",["^28",["^29",["^28",[["~$c"]]]]],"^2<","The name is accurate: we do no more than invoke the\n  rule of a formula and return its value*, but along the\n  way the links between dependencies and dependents get\n  determined anew.\n\n  * Well, we also look to see if a synaptic cell has attached a\n  propagaion code to a vector used to wrap the raw value, which we then unpack."],"^1L","~$tiltontec.cell.evaluate/calculate-and-link","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",25,"^2>",["^28",[["~$c"]]],"^2?",null,"^2@",["^28",[null,null]],"^24",1,"^2A",false,"^23",183,"^25",183,"^2E",1,"^2F",true,"^27",["^28",["^29",["^28",[["~$c"]]]]],"^2<","The name is accurate: we do no more than invoke the\n  rule of a formula and return its value*, but along the\n  way the links between dependencies and dependents get\n  determined anew.\n\n  * Well, we also look to see if a synaptic cell has attached a\n  propagaion code to a vector used to wrap the raw value, which we then unpack."],"~$c-value-changed?",["^ ","^20",null,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",425,"^24",7,"^25",425,"^26",23,"^27",["^28",["^29",["^28",[["~$c","^3>","~$old-value"]]]]]],"^1L","~$tiltontec.cell.evaluate/c-value-changed?","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",23,"^2>",["^28",[["~$c","^3>","^3J"]]],"^2?",null,"^2@",["^28",[null,null]],"^24",1,"^2A",false,"^23",425,"^2B","~$boolean","^25",425,"^2E",3,"^2F",true,"^27",["^28",["^29",["^28",[["~$c","^3>","^3J"]]]]]],"~$propagate-to-callers",["^ ","^20",null,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",494,"^24",7,"^25",494,"^26",27,"^27",["^28",["^29",["^28",[["~$c","^35"]]]]]],"^1L","~$tiltontec.cell.evaluate/propagate-to-callers","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^26",27,"^2>",["^28",[["~$c","^35"]]],"^2?",null,"^2@",["^28",[null,null]],"^24",1,"^2A",false,"^23",494,"^2B",["^1K",[null,"^2C","^2U","^2D"]],"^25",494,"^2E",2,"^2F",true,"^27",["^28",["^29",["^28",[["~$c","^35"]]]]]],"~$md-quiesce",["^ ","^1L","~$tiltontec.cell.evaluate/md-quiesce","^22","resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",403,"^24",1,"^25",403,"^26",21,"^21",["^ ","^22","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/tiltontec/cell/evaluate.cljc","^23",403,"^24",11,"^25",403,"^26",21],"^2P","^2Q"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^1R","^1R","^O","^O","^1Q","^4","^4","^4","^D","^D"],"~:cljs.analyzer/constants",["^ ","~:seen",["^1K",["~:valid","~:optimized-away","~:slot","~:awake","~:c-read","~:cells-flushed","~:cz","~:pre-rule-clear","~:ephemeral-reset","~:dead","~:freeze","~:opti-used","~:else","~:unchanged-if","~:no-propagate","~:uncurrent","~:quiesced","~:on-quiesce","~:default","~:c-awaken-def!!!","~:c-awaken-fall-thru","~:propagate","~:nested","~:value","~:slotv-assume","~:fn-c-awaken","~:nascent","~:evic","~:ref-of","~:tiltontec.cell.base/c-formula","~:pulse-last-changed","~:tell-dependents","~:tiltontec.cell.base/state","~:unref","~:cget","~:quiesce!!!-def","~:tiltontec.cell.base/cell","~:quiesce","~:when-value-t","~:cell-awaken","~:dead-c","~:once-asked","~:me","~:hierarchy","~:opti-away","~:valid-uninfluenced","~:always"]],"~:order",["^41","^4S","^3W","^4@","^4O","^4?","^4D","^45","^4V","^3Y","^4C","^4I","^3X","^4K","^40","^4>","^4T","^4;","^4<","^4=","^4E","^4J","^4M","^4P","^4F","^4B","^4A","^4G","^3U","^48","^47","^3Z","^43","^3V","^4U","^3[","^44","^4:","^4N","^4Q","^42","^4L","^46","^4R","^4W","^4H","^49"]],"^2<",null]