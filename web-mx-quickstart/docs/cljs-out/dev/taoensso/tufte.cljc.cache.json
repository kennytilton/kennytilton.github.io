["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$have","~$taoensso.encore","~$profiled","~$taoensso.tufte","~$have?","^4"],"~:excludes",["~#set",[]],"~:name","^6","~:imports",null,"~:requires",["^ ","~$enc","^4","^4","^4","~$stats","~$taoensso.tufte.stats","^?","^?","~$impl","~$taoensso.tufte.impl","^A","^A"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$PStats","^A","^3","^4","^7","^4"],"~:defs",["^ ","~$valid-compile-time-opts",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","~:line",388,"~:column",8,"~:end-line",388,"~:end-column",31,"~:private",true,"~:arglists",["~#list",["~$quote",["^P",[["~$dynamic?","~$nmax"]]]]]],"^N",true,"^:","~$taoensso.tufte/valid-compile-time-opts","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",31,"~:method-params",["^P",[["^R","^S"]]],"~:protocol-impl",null,"~:arglists-meta",["^P",[null,null]],"^K",1,"~:variadic?",false,"^J",388,"~:ret-tag","~$clj-nil","^L",388,"~:max-fixed-arity",2,"~:fn-var",true,"^O",["^P",["^Q",["^P",[["^R","^S"]]]]]],"~$format-grouped-pstats",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",857,"^K",7,"^L",857,"^M",28,"^O",["^P",["^Q",["^P",[["~$m"],["~$m",["^ ","~:keys",["~$group-sort-fn","~$format-pstats-opts"],"~:or",["^ ","^13",["^P",["~$fn",["~$m"],["^P",["~$get-in","~$m",["~:clock","~:total"],0]]]]]]]]]]],"~:doc","Alpha, subject to change.\n  Takes a map of {<group-id> <PStats>} and formats a combined\n  output string using `format-pstats`.\n\n  See also example clj project.","~:top-fn",["^ ","^X",false,"~:fixed-arity",2,"^[",2,"^U",[["~$m"],["~$m",["^ ","^12",["^13","^14"],"^15",["^ ","^13",["^P",["^16",["~$m"],["^P",["^17","~$m",["^18","^19"],0]]]]]]]],"^O",["^P",[["~$m"],["~$m",["^ ","^12",["^13","^14"],"^15",["^ ","^13",["^P",["^16",["~$m"],["^P",["^17","~$m",["^18","^19"],0]]]]]]]]],"^W",["^P",[null,null]]]],"^:","~$taoensso.tufte/format-grouped-pstats","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",28,"^1;",["^ ","^X",false,"^1<",2,"^[",2,"^U",[["~$m"],["~$m",["^ ","^12",["^13","^14"],"^15",["^ ","^13",["^P",["^16",["~$m"],["^P",["^17","~$m",["^18","^19"],0]]]]]]]],"^O",["^P",[["~$m"],["~$m",["^ ","^12",["^13","^14"],"^15",["^ ","^13",["^P",["^16",["~$m"],["^P",["^17","~$m",["^18","^19"],0]]]]]]]]],"^W",["^P",[null,null]]],"^U",[["~$m"],["~$m",["^ ","^12",["^13","^14"],"^15",["^ ","^13",["^P",["^16",["~$m"],["^P",["^17","~$m",["^18","^19"],0]]]]]]]],"^V",null,"^1<",2,"^W",["^P",[null,null]],"^K",1,"^X",false,"~:methods",[["^ ","^1<",1,"^X",false,"~:tag","~$any"],["^ ","^1<",2,"^X",false,"^1?",["^9",["^1@","~$string","^Z"]]]],"^J",857,"^L",857,"^[",2,"^10",true,"^O",["^P",[["~$m"],["~$m",["^ ","^12",["^13","^14"],"^15",["^ ","^13",["^P",["^16",["~$m"],["^P",["^17","~$m",["^18","^19"],0]]]]]]]]],"^1:","Alpha, subject to change.\n  Takes a map of {<group-id> <PStats>} and formats a combined\n  output string using `format-pstats`.\n\n  See also example clj project."],"~$may-profile?",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",57,"^1;",["^ ","^X",false,"^1<",2,"^[",2,"^U",[["~$level"],["^1C","~$ns"]],"^O",["^P",[["^1C"],["^1C","^1D"]]],"^W",["^P",[null,null]]],"^K",45,"^J",132,"^L",132,"^1?","~$boolean","^O",["^P",["^Q",["^P",[["^1C"],["^1C","^1D"]]]]],"^1:","Implementation detail.\n    Returns true iff level and ns are runtime unfiltered."],"^:","~$taoensso.tufte/may-profile?","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",57,"^1;",["^ ","^X",false,"^1<",2,"^[",2,"^U",[["^1C"],["^1C","^1D"]],"^O",["^P",[["^1C"],["^1C","^1D"]]],"^W",["^P",[null,null]]],"^U",[["^1C"],["^1C","^1D"]],"^V",null,"^1<",2,"^W",["^P",[null,null]],"^K",3,"^X",false,"^1>",[["^ ","^1<",1,"^X",false,"^1?","^1E"],["^ ","^1<",2,"^X",false,"^1?","^1E"]],"^J",132,"^Y","^1E","^L",132,"^[",2,"^1?","^1E","^10",true,"^O",["^P",[["^1C"],["^1C","^1D"]]],"^1:","Implementation detail.\n    Returns true iff level and ns are runtime unfiltered."],"~$defnp",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",16,"^1;",["^ ","^X",true,"^1<",0,"^[",0,"^U",["^P",[["^P",["~$sigs"]]]],"^O",["^P",[["~$&","^1H"]]],"^W",["^P",[null]]],"^K",11,"^J",742,"~:macro",true,"^L",742,"^O",["^P",["^Q",["^P",[["~$name","~$doc-string?","~$attr-map?",["~$params*"],"~$prepost-map?","~$body"],["^1J","^1K","^1L",["^P",[["^1M"],"^1N","^1O"]],"~$+","^1L"]]]]],"^1:","Like `defn` but wraps fn bodies with `p` macro."],"^:","~$taoensso.tufte/defnp","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",16,"^1;",["^ ","^X",true,"^1<",0,"^[",0,"^U",["^P",[["^P",["^1H"]]]],"^O",["^P",[["~$&","^1H"]]],"^W",["^P",[null]]],"^U",["^P",[["^P",["^1H"]]]],"^V",null,"^1<",0,"^W",["^P",[null]],"^K",1,"^X",true,"^1>",[["^ ","^1<",0,"^X",true,"^1?",["^9",["~$seq","~$cljs.core/IList"]]]],"^J",742,"^1I",true,"^Y","^1@","^L",742,"^[",0,"^10",false,"^O",["^P",[["~$&","^1H"]]],"^1:","Like `defn` but wraps fn bodies with `p` macro."],"~$handlers_",["^ ","^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",198,"^K",14,"^L",198,"^M",23],"^:","~$taoensso.tufte/handlers_","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",23,"^K",1,"^J",198,"^L",198,"^1?","~$cljs.core/Atom","^1:","{<handler-id> <handler-fn>}"],"~$->StatsAccumulator",["^ ","^G",null,"^H",["^ ","~:protocols",["^9",["~$cljs.core/IFn","~$cljs.core/IDeref"]],"^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",26,"^K",10,"~:factory","~:positional","^J",777,"^L",777,"^O",["^P",["^Q",["^P",[["~$pstats_"]]]]],"~:skip-protocol-flag",["^9",["^1X","^1Y"]],"^1:","Positional factory function for taoensso.tufte/StatsAccumulator."],"^1W",["^9",["^1X","^1Y"]],"^:","~$taoensso.tufte/->StatsAccumulator","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",26,"^U",["^P",[["^20"]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^1Z","^1[","^J",777,"^Y","~$taoensso.tufte/StatsAccumulator","^L",777,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["^20"]]]]],"^21",["^9",["^1X","^1Y"]],"^1:","Positional factory function for taoensso.tufte/StatsAccumulator."],"~$fnp",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",14,"^1;",["^ ","^X",true,"^1<",0,"^[",0,"^U",["^P",[["^P",["^1H"]]]],"^O",["^P",[["~$&","^1H"]]],"^W",["^P",[null]]],"^K",11,"^J",722,"^1I",true,"^L",722,"^O",["^P",["^Q",["^P",[["~$name?",["^1M"],"^1N","^1O"],["^25",["^P",[["^1M"],"^1N","^1O"]],"~$+"]]]]],"^1:","Like `fn` but wraps fn bodies with `p` macro."],"^:","~$taoensso.tufte/fnp","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",14,"^1;",["^ ","^X",true,"^1<",0,"^[",0,"^U",["^P",[["^P",["^1H"]]]],"^O",["^P",[["~$&","^1H"]]],"^W",["^P",[null]]],"^U",["^P",[["^P",["^1H"]]]],"^V",null,"^1<",0,"^W",["^P",[null]],"^K",1,"^X",true,"^1>",[["^ ","^1<",0,"^X",true,"^1?",["^9",["^1Q","^1R"]]]],"^J",722,"^1I",true,"^Y","^1@","^L",722,"^[",0,"^10",false,"^O",["^P",[["~$&","^1H"]]],"^1:","Like `fn` but wraps fn bodies with `p` macro."],"~$set-ns-pattern!",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",908,"^K",14,"^L",908,"^M",29,"^O",["^P",["^Q",["^P",[["~$ns-pattern"]]]]],"^1:","Deprecated, just use `alter-var-root`"],"^:","~$taoensso.tufte/set-ns-pattern!","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",29,"^U",["^P",[["^28"]]],"^V",null,"^W",["^P",[null,null]],"^K",3,"^X",false,"^J",908,"^L",908,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["^28"]]]]],"^1:","Deprecated, just use `alter-var-root`"],"~$with-profiling",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",25,"^1;",["^ ","^X",true,"^1<",2,"^[",2,"^U",["^P",[["^P",["~$pdata",["^ ","^12",["^R","^S"],"^15",["^ ","^S","~$default-nmax"]],"^1O"]]]],"^O",["^P",[["^2;",["^ ","^12",["^R","^S"],"^15",["^ ","^S","^2<"]],"~$&","^1O"]]],"^W",["^P",[null]]],"^K",11,"^J",339,"^1I",true,"^L",339,"^O",["^P",["^Q",["^P",[["^2;",["^ ","^12",["^R","^S"],"^15",["^ ","^S","^2<"]],"~$&","^1O"]]]]],"^1:","Note: this is a low-level primitive for advanced users!\n  Enables `p` forms in body and returns body's result.\n\n  If `:dynamic?` is false (default), body's evaluation MUST begin\n  and end without interruption on the same thread. In particular\n  this means that body MUST NOT contain any parking `core.async`\n  calls.\n\n  See `new-pdata` for more info on low-level primitives."],"^:","~$taoensso.tufte/with-profiling","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",25,"^1;",["^ ","^X",true,"^1<",2,"^[",2,"^U",["^P",[["^P",["^2;",["^ ","^12",["^R","^S"],"^15",["^ ","^S","^2<"]],"^1O"]]]],"^O",["^P",[["^2;",["^ ","^12",["^R","^S"],"^15",["^ ","^S","^2<"]],"~$&","^1O"]]],"^W",["^P",[null]]],"^U",["^P",[["^P",["^2;",["^ ","^12",["^R","^S"],"^15",["^ ","^S","^2<"]],"^1O"]]]],"^V",null,"^1<",2,"^W",["^P",[null]],"^K",1,"^X",true,"^1>",[["^ ","^1<",2,"^X",true,"^1?",["^9",["^1Q","^1R"]]]],"^J",339,"^1I",true,"^Y","^1@","^L",339,"^[",2,"^10",false,"^O",["^P",[["^2;",["^ ","^12",["^R","^S"],"^15",["^ ","^S","^2<"]],"~$&","^1O"]]],"^1:","Note: this is a low-level primitive for advanced users!\n  Enables `p` forms in body and returns body's result.\n\n  If `:dynamic?` is false (default), body's evaluation MUST begin\n  and end without interruption on the same thread. In particular\n  this means that body MUST NOT contain any parking `core.async`\n  calls.\n\n  See `new-pdata` for more info on low-level primitives."],"~$with-min-level",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",27,"^1;",["^ ","^X",true,"^1<",1,"^[",1,"^U",["^P",[["^P",["^1C","^1O"]]]],"^O",["^P",[["^1C","~$&","^1O"]]],"^W",["^P",[null]]],"^K",13,"^J",902,"^1I",true,"^L",902,"^O",["^P",["^Q",["^P",[["^1C","~$&","^1O"]]]]],"^1:","Deprecated, just use `binding`"],"^:","~$taoensso.tufte/with-min-level","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",27,"^1;",["^ ","^X",true,"^1<",1,"^[",1,"^U",["^P",[["^P",["^1C","^1O"]]]],"^O",["^P",[["^1C","~$&","^1O"]]],"^W",["^P",[null]]],"^U",["^P",[["^P",["^1C","^1O"]]]],"^V",null,"^1<",1,"^W",["^P",[null]],"^K",3,"^X",true,"^1>",[["^ ","^1<",1,"^X",true,"^1?",["^9",["^1Q","^1R"]]]],"^J",902,"^1I",true,"^Y","^1@","^L",902,"^[",1,"^10",false,"^O",["^P",[["^1C","~$&","^1O"]]],"^1:","Deprecated, just use `binding`"],"~$add-basic-println-handler!",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",245,"^K",7,"^L",245,"^M",33,"^O",["^P",["^Q",["^P",[[["^ ","^12",["^28","~$handler-id","^14"],"^15",["^ ","^28","*","^2A","~:basic-println"]]]]]]],"^1:","Adds a simple handler that logs `profile` stats output with `println`."],"^:","~$taoensso.tufte/add-basic-println-handler!","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",33,"^U",["^P",[["~$p__32674"]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^J",245,"^Y",["^9",["~$clj","^1@","~$cljs.core/ISet","~$cljs.core/MetaFn","^Z"]],"^L",245,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[[["^ ","^12",["^28","^2A","^14"],"^15",["^ ","^28","*","^2A","^2B"]]]]]]],"^1:","Adds a simple handler that logs `profile` stats output with `println`."],"~$*min-level*",["^ ","^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",61,"^K",16,"^L",61,"^M",27,"~:dynamic",true],"^:","~$taoensso.tufte/*min-level*","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",27,"^K",1,"^2I",true,"^J",61,"^L",61,"^1?","^1@","^1:","Integer e/o #{0 1 2 3 4 5 6}, or vector mapping ns-patterns to min-levels:\n    [[<ns-pattern> <min-level>] ... [\"*\" <default-min-level>]]\n\n  See `*ns-filter*` for example patterns."],"~$*ns-filter*",["^ ","^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",72,"^K",16,"^L",72,"^M",27,"^2I",true],"^:","~$taoensso.tufte/*ns-filter*","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",27,"^K",1,"^2I",true,"^J",72,"^L",72,"^1?","^1@","^1:","(fn may-profile-ns? [ns]) predicate, or ns-pattern.\n  Example ns-patterns:\n    #{}, \"*\", \"foo.bar\", \"foo.bar.*\", #{\"foo\" \"bar.*\"},\n    {:allow #{\"foo\" \"bar.*\"} :deny #{\"foo.*.bar.*\"}}"],"~$add-accumulating-handler!",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",806,"^K",7,"^L",806,"^M",32,"^O",["^P",["^Q",["^P",[[["^ ","^12",["^28","^2A"],"^15",["^ ","^28","*","^2A","~:accumulating"]]]]]]],"^1:","Alpha, subject to change.\n\n  Creates a new StatsAccumulator (and agent in clj), then\n  registers a handler to accumulate `profile` output to the\n  StatsAccumulator using the agent.\n\n  Returns the StatsAccumulator. You can deref the result to\n  drain the accumulator and return {<group-id> <merged-pstats>}.\n\n  One common pattern is to deref the accumulator every n\n  minutes/etc. to get a view of total-system performance over\n  the period, e.g.:\n\n  (defonce my-sacc (add-accumulating-handler! {:ns-pattern \"*\"}))\n  (defonce my-sacc-drainer\n    ;; Will drain and print formatted stats every minute\n    (future\n      (while true\n        (when-let [m (not-empty @my-sacc)]\n          (println (format-grouped-pstats m)))\n        (Thread/sleep 60000))))\n\n  (profile ...) ; Used elsewhere in your application, e.g.\n                ; wrapping relevant Ring routes in a web application.\n\n  See also `format-grouped-pstats`, example clj project."],"^:","~$taoensso.tufte/add-accumulating-handler!","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",32,"^U",["^P",[["~$p__32755"]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^J",806,"^Y","^23","^L",806,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[[["^ ","^12",["^28","^2A"],"^15",["^ ","^28","*","^2A","^2N"]]]]]]],"^1:","Alpha, subject to change.\n\n  Creates a new StatsAccumulator (and agent in clj), then\n  registers a handler to accumulate `profile` output to the\n  StatsAccumulator using the agent.\n\n  Returns the StatsAccumulator. You can deref the result to\n  drain the accumulator and return {<group-id> <merged-pstats>}.\n\n  One common pattern is to deref the accumulator every n\n  minutes/etc. to get a view of total-system performance over\n  the period, e.g.:\n\n  (defonce my-sacc (add-accumulating-handler! {:ns-pattern \"*\"}))\n  (defonce my-sacc-drainer\n    ;; Will drain and print formatted stats every minute\n    (future\n      (while true\n        (when-let [m (not-empty @my-sacc)]\n          (println (format-grouped-pstats m)))\n        (Thread/sleep 60000))))\n\n  (profile ...) ; Used elsewhere in your application, e.g.\n                ; wrapping relevant Ring routes in a web application.\n\n  See also `format-grouped-pstats`, example clj project."],"~$defnp-",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",17,"^1;",["^ ","^X",true,"^1<",0,"^[",0,"^U",["^P",[["^P",["^1H"]]]],"^O",["^P",[["~$&","^1H"]]],"^W",["^P",[null]]],"^K",11,"^J",751,"^1I",true,"^L",751,"^O",["^P",["^Q",["^P",[["^1J","^1K","^1L",["^1M"],"^1N","^1O"],["^1J","^1K","^1L",["^P",[["^1M"],"^1N","^1O"]],"~$+","^1L"]]]]],"^1:","Like `defn-` but wraps fn bodies with `p` macro."],"^:","~$taoensso.tufte/defnp-","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",17,"^1;",["^ ","^X",true,"^1<",0,"^[",0,"^U",["^P",[["^P",["^1H"]]]],"^O",["^P",[["~$&","^1H"]]],"^W",["^P",[null]]],"^U",["^P",[["^P",["^1H"]]]],"^V",null,"^1<",0,"^W",["^P",[null]],"^K",1,"^X",true,"^1>",[["^ ","^1<",0,"^X",true,"^1?",["^9",["^1Q","^1R"]]]],"^J",751,"^1I",true,"^Y","^1@","^L",751,"^[",0,"^10",false,"^O",["^P",[["~$&","^1H"]]],"^1:","Like `defn-` but wraps fn bodies with `p` macro."],"~$format-id-abbr",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",259,"^K",7,"^L",259,"^M",21,"^O",["^P",["^Q",["^P",[[],["~$n"]]]]],"^1:","Returns a cached (fn [id]) -> abbreviated id string.\n  Takes `n` (default 1), the number of namespace parts to keep unabbreviated.\n\n  Examples:\n    ((format-id-abbr)   :foo)                     => \"foo\"\n    ((format-id-abbr)   :example.hello/foo)       => \"e.hello/foo\"\n    ((format-id-abbr 1) :example.hello/foo)       => \"e.hello/foo\"\n    ((format-id-abbr 1) :example.hello.world/foo) => \"e.h.world/foo\"\n    ((format-id-abbr 2) :example.hello.world/foo) => \"e.hello.world/foo\"\n    ((format-id-abbr 0) :example.hello.world/foo) => \"e.h.w/foo\"","^1;",["^ ","^X",false,"^1<",1,"^[",1,"^U",[[],["~$n"]],"^O",["^P",[[],["~$n"]]],"^W",["^P",[null,null]]]],"^:","~$taoensso.tufte/format-id-abbr","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",21,"^1;",["^ ","^X",false,"^1<",1,"^[",1,"^U",[[],["~$n"]],"^O",["^P",[[],["~$n"]]],"^W",["^P",[null,null]]],"^U",[[],["~$n"]],"^V",null,"^1<",1,"^W",["^P",[null,null]],"^K",1,"^X",false,"^1>",[["^ ","^1<",0,"^X",false,"^1?","^1@"],["^ ","^1<",1,"^X",false,"^1?","~$function"]],"^J",259,"^L",259,"^[",1,"^10",true,"^O",["^P",[[],["~$n"]]],"^1:","Returns a cached (fn [id]) -> abbreviated id string.\n  Takes `n` (default 1), the number of namespace parts to keep unabbreviated.\n\n  Examples:\n    ((format-id-abbr)   :foo)                     => \"foo\"\n    ((format-id-abbr)   :example.hello/foo)       => \"e.hello/foo\"\n    ((format-id-abbr 1) :example.hello/foo)       => \"e.hello/foo\"\n    ((format-id-abbr 1) :example.hello.world/foo) => \"e.h.world/foo\"\n    ((format-id-abbr 2) :example.hello.world/foo) => \"e.hello.world/foo\"\n    ((format-id-abbr 0) :example.hello.world/foo) => \"e.h.w/foo\""],"~$compile-ns-filter",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",650,"^K",7,"^L",650,"^M",24,"^O",["^P",["^Q",["^P",[["^28"]]]]],"^1:","Wraps `taoensso.encore/compile-str-filter`."],"^:","~$taoensso.tufte/compile-ns-filter","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",24,"^U",["^P",[["^28"]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^J",650,"^Y","^2U","^L",650,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["^28"]]]]],"^1:","Wraps `taoensso.encore/compile-str-filter`."],"~$map->HandlerVal",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",22,"^K",12,"~:internal-ctor",true,"^1Z","~:map","^J",196,"^L",196,"^O",["^P",["^Q",["^P",[["~$G__32660"]]]]],"^1:","Factory function for taoensso.tufte/HandlerVal, taking a map of keywords to field values."],"^:","~$taoensso.tufte/map->HandlerVal","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",22,"^U",["^P",[["^2["]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^2Y",true,"^X",false,"^1Z","^2Z","^J",196,"^Y","~$taoensso.tufte/HandlerVal","^L",196,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["^2["]]]]],"^1:","Factory function for taoensso.tufte/HandlerVal, taking a map of keywords to field values."],"~$HandlerVal",["^ ","~:num-fields",8,"^1W",["^9",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^:","^31","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",22,"~:type",true,"^K",12,"^2Y",true,"^J",196,"~:record",true,"^L",196,"^1?","^2U","^21",["^9",["^34","^35","^36","^37","^38","^39","^3:","^3;","^3<","^3=","^3>","^3?","^3@","^3A","^3B"]]],"~$StatsAccumulator",["^ ","^33",1,"^1W",["^9",["^1X","^1Y"]],"^:","^23","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",26,"^3C",true,"^K",10,"^J",777,"^3D",false,"^L",777,"^1?","^2U","^21",["^9",["^1X","^1Y"]]],"~$new-pdata",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",305,"^K",7,"^L",305,"^M",16,"^O",["^P",["^Q",["^P",[[],[["^ ","^12",["^R","^S"],"^15",["^ ","^R",true,"^S","^2<"]]]]]]],"^1:","Note: this is a low-level primitive for advanced users!\n  Returns a new pdata object for use with `with-profiling` and/or `capture-time!`.\n  Deref to get pstats:\n\n    (let [pd (new-pdata)\n          t0 (System/nanoTime)]\n      (with-profiling pd {}\n        (p :foo (Thread/sleep 100))\n        (capture-time! pd :bar (- t0 (System/nanoTime))))\n      (deref pd))\n\n  Dynamic (thread-safe) by default.\n  *WARNING*: don't change this default unless you're very sure the resulting\n  pdata object will not be concurrently modified across threads. Concurrent\n  modification will lead to bad data and/or exceptions!","^1;",["^ ","^X",false,"^1<",1,"^[",1,"^U",[[],[["^ ","^12",["^R","^S"],"^15",["^ ","^R",true,"^S","^2<"]]]],"^O",["^P",[[],[["^ ","^12",["^R","^S"],"^15",["^ ","^R",true,"^S","^2<"]]]]],"^W",["^P",[null,null]]]],"^:","~$taoensso.tufte/new-pdata","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",16,"^1;",["^ ","^X",false,"^1<",1,"^[",1,"^U",[[],[["^ ","^12",["^R","^S"],"^15",["^ ","^R",true,"^S","^2<"]]]],"^O",["^P",[[],[["^ ","^12",["^R","^S"],"^15",["^ ","^R",true,"^S","^2<"]]]]],"^W",["^P",[null,null]]],"^U",[[],[["^ ","^12",["^R","^S"],"^15",["^ ","^R",true,"^S","^2<"]]]],"^V",null,"^1<",1,"^W",["^P",[null,null]],"^K",1,"^X",false,"^1>",[["^ ","^1<",0,"^X",false,"^1?","^1@"],["^ ","^1<",1,"^X",false,"^1?","~$taoensso.tufte.impl/PData"]],"^J",305,"^L",305,"^[",1,"^10",true,"^O",["^P",[[],[["^ ","^12",["^R","^S"],"^15",["^ ","^R",true,"^S","^2<"]]]]],"^1:","Note: this is a low-level primitive for advanced users!\n  Returns a new pdata object for use with `with-profiling` and/or `capture-time!`.\n  Deref to get pstats:\n\n    (let [pd (new-pdata)\n          t0 (System/nanoTime)]\n      (with-profiling pd {}\n        (p :foo (Thread/sleep 100))\n        (capture-time! pd :bar (- t0 (System/nanoTime))))\n      (deref pd))\n\n  Dynamic (thread-safe) by default.\n  *WARNING*: don't change this default unless you're very sure the resulting\n  pdata object will not be concurrently modified across threads. Concurrent\n  modification will lead to bad data and/or exceptions!"],"~$valid-min-level?",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",52,"^K",8,"^L",52,"^M",24,"^N",true,"^O",["^P",["^Q",["^P",[["~$x"]]]]]],"^N",true,"^:","~$taoensso.tufte/valid-min-level?","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",24,"^U",["^P",[["~$x"]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^J",52,"^Y","^1E","^L",52,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["~$x"]]]]]],"~$set-min-level!",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",903,"^K",14,"^L",903,"^M",28,"^O",["^P",["^Q",["^P",[["^1C"]]]]],"^1:","Deprecated, just use `alter-var-root`"],"^:","~$taoensso.tufte/set-min-level!","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",28,"^U",["^P",[["^1C"]]],"^V",null,"^W",["^P",[null,null]],"^K",3,"^X",false,"^J",903,"^L",903,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["^1C"]]]]],"^1:","Deprecated, just use `alter-var-root`"],"~$valid-call-level?",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",51,"^K",8,"^L",51,"^M",25,"^N",true,"^O",["^P",["^Q",["^P",[["~$x"]]]]]],"^N",true,"^:","~$taoensso.tufte/valid-call-level?","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",25,"^U",["^P",[["~$x"]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^J",51,"^Y","^1E","^L",51,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["~$x"]]]]]],"~$valid-min-level",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",58,"^K",8,"^L",58,"^M",23,"^N",true,"^O",["^P",["^Q",["^P",[["~$x"]]]]]],"^N",true,"^:","~$taoensso.tufte/valid-min-level","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",23,"^U",["^P",[["~$x"]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^J",58,"^Y","^1@","^L",58,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["~$x"]]]]]],"~$may-profile-ns?",["^ ","^G",null,"^H",["^ ","^N",true,"^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",64,"^1;",["^ ","^X",false,"^1<",2,"^[",2,"^U",[["^1D"],["~$ns-filter","^1D"]],"^O",["^P",[["^1D"],["^3R","^1D"]]],"^W",["^P",[null,null]]],"^K",49,"^J",89,"^L",89,"^1?","^1E","^O",["^P",["^Q",["^P",[["^1D"],["^3R","^1D"]]]]],"^1:","Implementation detail."],"^N",true,"^:","~$taoensso.tufte/may-profile-ns?","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",64,"^1;",["^ ","^X",false,"^1<",2,"^[",2,"^U",[["^1D"],["^3R","^1D"]],"^O",["^P",[["^1D"],["^3R","^1D"]]],"^W",["^P",[null,null]]],"^U",[["^1D"],["^3R","^1D"]],"^V",null,"^1<",2,"^W",["^P",[null,null]],"^K",3,"^X",false,"^1>",[["^ ","^1<",1,"^X",false,"^1?","^1E"],["^ ","^1<",2,"^X",false,"^1?","^1E"]],"^J",89,"^Y","^1E","^L",89,"^[",2,"^1?","^1E","^10",true,"^O",["^P",[["^1D"],["^3R","^1D"]]],"^1:","Implementation detail."],"~$sacc-add!",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",771,"^K",8,"^L",771,"^M",17,"^N",true,"^O",["^P",["^Q",["^P",[["^20","~$group-id","~$ps"]]]]]],"^N",true,"^:","~$taoensso.tufte/sacc-add!","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",17,"^U",["^P",[["^20","^3U","^3V"]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^J",771,"^Y",["^9",["^1E","^Z"]],"^L",771,"^[",3,"^10",true,"^O",["^P",["^Q",["^P",[["^20","^3U","^3V"]]]]]],"~$sacc-drain-and-merge!",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",770,"^K",8,"^L",770,"^M",29,"^N",true,"^O",["^P",["^Q",["^P",[["^20"]]]]]],"^N",true,"^:","~$taoensso.tufte/sacc-drain-and-merge!","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",29,"^U",["^P",[["^20"]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^J",770,"^Y","^1@","^L",770,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["^20"]]]]]],"~$stats-accumulator",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",783,"^K",7,"^L",783,"^M",24,"^O",["^P",["^Q",["^P",[[]]]]],"^1:","Alpha, subject to change.\n  Small util to help merge pstats from multiple runs or threads.\n\n  Returns a stateful StatsAccumulator (`sacc`) with:\n    - `(sacc <group-id> <pstats>)` ; Merges given pstats under given group id\n    - `@sacc`                      ; Drains accumulator and returns {<group-id> <merged-pstats>}\n\n  Note that you may want some kind of async/buffer/serialization\n  mechanism in front of merge calls for performance (e.g. by using an agent).\n\n  See also `add-accumulating-handler!`, example clj project."],"^:","~$taoensso.tufte/stats-accumulator","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",24,"^U",["^P",[[]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^J",783,"^Y","^23","^L",783,"^[",0,"^10",true,"^O",["^P",["^Q",["^P",[[]]]]],"^1:","Alpha, subject to change.\n  Small util to help merge pstats from multiple runs or threads.\n\n  Returns a stateful StatsAccumulator (`sacc`) with:\n    - `(sacc <group-id> <pstats>)` ; Merges given pstats under given group id\n    - `@sacc`                      ; Drains accumulator and returns {<group-id> <merged-pstats>}\n\n  Note that you may want some kind of async/buffer/serialization\n  mechanism in front of merge calls for performance (e.g. by using an agent).\n\n  See also `add-accumulating-handler!`, example clj project."],"~$with-ns-pattern",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",28,"^1;",["^ ","^X",true,"^1<",1,"^[",1,"^U",["^P",[["^P",["^28","^1O"]]]],"^O",["^P",[["^28","~$&","^1O"]]],"^W",["^P",[null]]],"^K",13,"^J",907,"^1I",true,"^L",907,"^O",["^P",["^Q",["^P",[["^28","~$&","^1O"]]]]],"^1:","Deprecated, just use `binding`"],"^:","~$taoensso.tufte/with-ns-pattern","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",28,"^1;",["^ ","^X",true,"^1<",1,"^[",1,"^U",["^P",[["^P",["^28","^1O"]]]],"^O",["^P",[["^28","~$&","^1O"]]],"^W",["^P",[null]]],"^U",["^P",[["^P",["^28","^1O"]]]],"^V",null,"^1<",1,"^W",["^P",[null]],"^K",3,"^X",true,"^1>",[["^ ","^1<",1,"^X",true,"^1?",["^9",["^1Q","^1R"]]]],"^J",907,"^1I",true,"^Y","^1@","^L",907,"^[",1,"^10",false,"^O",["^P",[["^28","~$&","^1O"]]],"^1:","Deprecated, just use `binding`"],"~$profiling?",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",299,"^K",7,"^L",299,"^M",17,"^O",["^P",["^Q",["^P",[[]]]]],"^1:","Returns e/o #{nil :thread :dynamic}."],"^:","~$taoensso.tufte/profiling?","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",17,"^U",["^P",[[]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^J",299,"^Y",["^9",["~$cljs.core/Keyword","^Z"]],"^L",299,"^[",0,"^10",true,"^O",["^P",["^Q",["^P",[[]]]]],"^1:","Returns e/o #{nil :thread :dynamic}."],"~$format-pstats",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",674,"^K",7,"^L",674,"^M",20,"^O",["^P",["^Q",["^P",[["^3V"],["^3V","~$opts"]]]]],"^1:","Formats given pstats to a string table.\n    Accounted < Clock => Some work was done that wasn't tracked by any p forms.\n    Accounted > Clock => Nested p forms, and/or parallel threads.","^1;",["^ ","^X",false,"^1<",2,"^[",2,"^U",[["^3V"],["^3V","^46"]],"^O",["^P",[["^3V"],["^3V","^46"]]],"^W",["^P",[null,null]]]],"^:","~$taoensso.tufte/format-pstats","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",20,"^1;",["^ ","^X",false,"^1<",2,"^[",2,"^U",[["^3V"],["^3V","^46"]],"^O",["^P",[["^3V"],["^3V","^46"]]],"^W",["^P",[null,null]]],"^U",[["^3V"],["^3V","^46"]],"^V",null,"^1<",2,"^W",["^P",[null,null]],"^K",1,"^X",false,"^1>",[["^ ","^1<",1,"^X",false,"^1?","^1@"],["^ ","^1<",2,"^X",false,"^1?",["^9",["^1A","^Z"]]]],"^J",674,"^L",674,"^[",2,"^10",true,"^O",["^P",[["^3V"],["^3V","^46"]]],"^1:","Formats given pstats to a string table.\n    Accounted < Clock => Some work was done that wasn't tracked by any p forms.\n    Accounted > Clock => Nested p forms, and/or parallel threads."],"~$ns->?min-level",["^ ","^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",94,"^K",18,"^L",94,"^M",32,"^N",true],"^N",true,"^:","~$taoensso.tufte/ns->?min-level","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",32,"^K",3,"^J",94,"^L",94,"^1?","^2U","^1:","[[<ns-pattern> <min-level>] ... [\"*\" <default-min-level>]], ns -> ?min-level"],"~$add-handler!",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",200,"^K",10,"^L",200,"^M",22,"^O",["^P",["^Q",["^P",[["^2A","~$handler-fn"],["^2A","^28","^4;"]]]]],"^1:","Use this to register interest in stats output produced by `profile` calls.\n  Each registered `handler-fn` will be called as:\n\n    (handler-fn {:ns-str _ :level _ :?id _ :?data _ :pstats _ :pstats-str_ _})\n\n  Map args:\n    :ns-str      - Namespace string where `profile` call took place\n    :level       - Level e/o #{0 1 2 3 4 5}, given in `(profile {:level _} ...)`\n    :?id         - Optional group id,        given in `(profile {:id    _} ...)`\n    :?data       - Optional arb data,        given in `(profile {:data  _} ...)`\n    :pstats      - As in `(second (profiled ...))`. Derefable, mergeable.\n    :pstats-str_ - `(delay (format-pstats pstats))\n\n  Error handling (NB):\n    Handler errors will be silently swallowed. Please `try`/`catch` and\n    appropriately deal with (e.g. log) possible errors *within* `handler-fn`.\n\n  Async/blocking:\n    `handler-fn` should ideally be non-blocking, or reasonably cheap. Handler\n     dispatch occurs through a 1-thread 1k-buffer dropping queue.\n\n  Ns filtering:\n    Provide an optional `ns-pattern` arg to only call handler for matching\n    namespaces. See `*ns-filter*` for example patterns.\n\n  Handler ideas:\n    Save to a db, log, `put!` to an appropriate `core.async` channel, filter,\n    aggregate, use for a realtime analytics dashboard, examine for outliers\n    or unexpected output, ...","^1;",["^ ","^X",false,"^1<",3,"^[",3,"^U",[["^2A","^4;"],["^2A","^28","^4;"]],"^O",["^P",[["^2A","^4;"],["^2A","^28","^4;"]]],"^W",["^P",[null,null]]]],"^:","~$taoensso.tufte/add-handler!","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",22,"^1;",["^ ","^X",false,"^1<",3,"^[",3,"^U",[["^2A","^4;"],["^2A","^28","^4;"]],"^O",["^P",[["^2A","^4;"],["^2A","^28","^4;"]]],"^W",["^P",[null,null]]],"^U",[["^2A","^4;"],["^2A","^28","^4;"]],"^V",null,"^1<",3,"^W",["^P",[null,null]],"^K",1,"^X",false,"^1>",[["^ ","^1<",2,"^X",false,"^1?","^1@"],["^ ","^1<",3,"^X",false,"^1?",["^9",["^2E","^1@","^2F","^2G","^Z"]]]],"^J",200,"^L",200,"^[",3,"^10",true,"^O",["^P",[["^2A","^4;"],["^2A","^28","^4;"]]],"^1:","Use this to register interest in stats output produced by `profile` calls.\n  Each registered `handler-fn` will be called as:\n\n    (handler-fn {:ns-str _ :level _ :?id _ :?data _ :pstats _ :pstats-str_ _})\n\n  Map args:\n    :ns-str      - Namespace string where `profile` call took place\n    :level       - Level e/o #{0 1 2 3 4 5}, given in `(profile {:level _} ...)`\n    :?id         - Optional group id,        given in `(profile {:id    _} ...)`\n    :?data       - Optional arb data,        given in `(profile {:data  _} ...)`\n    :pstats      - As in `(second (profiled ...))`. Derefable, mergeable.\n    :pstats-str_ - `(delay (format-pstats pstats))\n\n  Error handling (NB):\n    Handler errors will be silently swallowed. Please `try`/`catch` and\n    appropriately deal with (e.g. log) possible errors *within* `handler-fn`.\n\n  Async/blocking:\n    `handler-fn` should ideally be non-blocking, or reasonably cheap. Handler\n     dispatch occurs through a 1-thread 1k-buffer dropping queue.\n\n  Ns filtering:\n    Provide an optional `ns-pattern` arg to only call handler for matching\n    namespaces. See `*ns-filter*` for example patterns.\n\n  Handler ideas:\n    Save to a db, log, `put!` to an appropriate `core.async` channel, filter,\n    aggregate, use for a realtime analytics dashboard, examine for outliers\n    or unexpected output, ..."],"~$merge-pstats",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",663,"^K",7,"^L",663,"^M",19,"^O",["^P",["^Q",["^P",[[],["~$ps0"],["^4>","~$ps1"]]]]],"^1:","Statistics are lossless unless data to merge are very large.","^1;",["^ ","^X",false,"^1<",2,"^[",2,"^U",[[],["^4>"],["^4>","^4?"]],"^O",["^P",[[],["^4>"],["^4>","^4?"]]],"^W",["^P",[null,null,null]]]],"^:","~$taoensso.tufte/merge-pstats","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",19,"^1;",["^ ","^X",false,"^1<",2,"^[",2,"^U",[[],["^4>"],["^4>","^4?"]],"^O",["^P",[[],["^4>"],["^4>","^4?"]]],"^W",["^P",[null,null,null]]],"^U",[[],["^4>"],["^4>","^4?"]],"^V",null,"^1<",2,"^W",["^P",[null,null,null]],"^K",1,"^X",false,"^1>",[["^ ","^1<",0,"^X",false,"^1?","^Z"],["^ ","^1<",1,"^X",false],["^ ","^1<",2,"^X",false,"^1?","^1@"]],"^J",663,"^L",663,"^[",2,"^10",true,"^O",["^P",[[],["^4>"],["^4>","^4?"]]],"^1:","Statistics are lossless unless data to merge are very large."],"^2<",["^ ","^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",304,"^K",24,"^L",304,"^M",36,"^N",true,"~:const",true],"^N",true,"^:","~$taoensso.tufte/default-nmax","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",36,"^K",1,"^4A",true,"^J",304,"^L",304,"^1?","~$number"],"~$invalid-min-level-msg",["^ ","^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",55,"^K",24,"^L",55,"^M",45,"^4A",true,"^N",true],"^N",true,"^:","~$taoensso.tufte/invalid-min-level-msg","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",45,"~:const-expr",["^ ","~:op","^4A","~:val","Invalid minimum Tufte profiling level: should be int e/o #{0 1 2 3 4 5 6}","~:env",["^ ","~:context","~:expr"],"~:form","Invalid minimum Tufte profiling level: should be int e/o #{0 1 2 3 4 5 6}","^1?","^1A"],"^K",1,"^4A",true,"^J",55,"^L",55,"^1?","^1A"],"~$remove-handler!",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",199,"^K",7,"^L",199,"^M",22,"^O",["^P",["^Q",["^P",[["^2A"]]]]]],"^:","~$taoensso.tufte/remove-handler!","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",22,"^U",["^P",[["^2A"]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^J",199,"^Y",["^9",["^2E","^1@","^2F","^2G","^Z"]],"^L",199,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["^2A"]]]]]],"~$fn-sigs",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",698,"^K",8,"^L",698,"^M",15,"^N",true,"^O",["^P",["^Q",["^P",[["~$def?","~$?meta-pid","~$fn-sym","^1H"]]]]]],"^N",true,"^:","~$taoensso.tufte/fn-sigs","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",15,"^U",["^P",[["^4P","^4Q","^4R","^1H"]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^J",698,"^Y","~$cljs.core/LazySeq","^L",698,"^[",4,"^10",true,"^O",["^P",["^Q",["^P",[["^4P","^4Q","^4R","^1H"]]]]]],"~$chance",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",653,"^K",7,"^L",653,"^M",13,"^O",["^P",["^Q",["^P",[["~$p"]]]]],"^1:","Returns true with 0<`p`<1 probability."],"^:","~$taoensso.tufte/chance","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",13,"^U",["^P",[["~$p"]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^J",653,"^Y","^1E","^L",653,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["~$p"]]]]],"^1:","Returns true with 0<`p`<1 probability."],"~$->HandlerVal",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",22,"^K",12,"^2Y",true,"^1Z","^1[","^J",196,"^L",196,"^O",["^P",["^Q",["^P",[["~$ns-str","^1C","~$?id","~$?data","~$pstats","~$pstats-str_","~$?file","~$?line"]]]]],"^1:","Positional factory function for taoensso.tufte/HandlerVal."],"^:","~$taoensso.tufte/->HandlerVal","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",22,"^U",["^P",[["^4X","^1C","^4Y","^4Z","^4[","^50","^51","^52"]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^2Y",true,"^X",false,"^1Z","^1[","^J",196,"^Y","^31","^L",196,"^[",8,"^10",true,"^O",["^P",["^Q",["^P",[["^4X","^1C","^4Y","^4Z","^4[","^50","^51","^52"]]]]],"^1:","Positional factory function for taoensso.tufte/HandlerVal."],"~$invalid-call-level-msg",["^ ","^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",54,"^K",24,"^L",54,"^M",46,"^4A",true,"^N",true],"^N",true,"^:","~$taoensso.tufte/invalid-call-level-msg","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",46,"^4F",["^ ","^4G","^4A","^4H","Invalid Tufte profiling level: should be int e/o #{0 1 2 3 4 5}","^4I",["^ ","^4J","^4K"],"^4L","Invalid Tufte profiling level: should be int e/o #{0 1 2 3 4 5}","^1?","^1A"],"^K",1,"^4A",true,"^J",54,"^L",54,"^1?","^1A"],"~$get-min-level",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",117,"^K",10,"^L",117,"^M",23,"^N",true,"^O",["^P",["^Q",["^P",[["~$default","~$x","^1D"]]]]]],"^N",true,"^:","~$taoensso.tufte/get-min-level","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",23,"^U",["^P",[["^57","~$x","^1D"]]],"^V",null,"^W",["^P",[null,null]],"^K",3,"^X",false,"^J",117,"^Y","^1@","^L",117,"^[",3,"^10",true,"^O",["^P",["^Q",["^P",[["^57","~$x","^1D"]]]]]],"~$capture-time!",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",357,"^K",7,"^L",357,"^M",20,"^O",["^P",["^Q",["^P",[["^2;","~$id","~$nano-secs-elapsed"],["^5:","^5;"]]]]],"^1:","Note: this is a low-level primitive for advanced users!\n  Can be useful when tracking time across arbitrary thread boundaries or for\n  async jobs / callbacks / etc.\n\n  See `new-pdata` for more info on low-level primitives.","^1;",["^ ","^X",false,"^1<",3,"^[",3,"^U",[["^2;","^5:","^5;"],["^5:","^5;"]],"^O",["^P",[["^2;","^5:","^5;"],["^5:","^5;"]]],"^W",["^P",[null,null]]]],"^:","~$taoensso.tufte/capture-time!","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",20,"^1;",["^ ","^X",false,"^1<",3,"^[",3,"^U",[["^2;","^5:","^5;"],["^5:","^5;"]],"^O",["^P",[["^2;","^5:","^5;"],["^5:","^5;"]]],"^W",["^P",[null,null]]],"^U",[["^2;","^5:","^5;"],["^5:","^5;"]],"^V",null,"^1<",3,"^W",["^P",[null,null]],"^K",1,"^X",false,"^1>",[["^ ","^1<",3,"^X",false,"^1?","^Z"],["^ ","^1<",2,"^X",false,"^1?","^Z"]],"^J",357,"^L",357,"^[",3,"^10",true,"^O",["^P",[["^2;","^5:","^5;"],["^5:","^5;"]]],"^1:","Note: this is a low-level primitive for advanced users!\n  Can be useful when tracking time across arbitrary thread boundaries or for\n  async jobs / callbacks / etc.\n\n  See `new-pdata` for more info on low-level primitives."],"~$valid-call-level",["^ ","^G",null,"^H",["^ ","^I","/Users/kennethtilton/dev/kennytilton.github.io/web-mx-quickstart/resources/public/cljs-out/dev/taoensso/tufte.cljc","^J",57,"^K",8,"^L",57,"^M",24,"^N",true,"^O",["^P",["^Q",["^P",[["~$x"]]]]]],"^N",true,"^:","~$taoensso.tufte/valid-call-level","^I","resources/public/cljs-out/dev/taoensso/tufte.cljc","^M",24,"^U",["^P",[["~$x"]]],"^V",null,"^W",["^P",[null,null]],"^K",1,"^X",false,"^J",57,"^Y","^1@","^L",57,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["~$x"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^6","^6","^=","^4","^4","^4","^@","^A","^A","^A"],"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~$taoensso.tufte.impl/pdata-local-pop","~$try","~:given","~$cljs.core/binding","~:nmax","~:handler-id","^N","~:else","~:ns-pattern","~:dynamic?","~$taoensso.tufte.impl/*pdata*","~$finally","~:value","~$cljs.core/defn","^2J","~:?file","^3C","~$do","~:ns-str","~:group-sort-fn","~:level","~$taoensso.tufte/p","^19","^51","^2I","~:thread","^2L","^4X","~:pstats-str_","~$taoensso.tufte.impl/pdata-local-push","~$cljs.core/fn","^1C","^2N","^2B","~:?data","~:?line","~:pstats","~:?id","~:def","^18","~:max-id-width","^50","~:stats","^4Z","~:tufte/nil-id","^52","^20","~:format-pstats-opts","~:tufte/id","^4Y","^4["]],"~:order",["^5E","^3C","^5R","^5T","^61","^5Z","^60","^5W","^5P","^5[","^4X","^1C","^4Y","^4Z","^4[","^50","^51","^52","^5J","^5H","^2B","^66","^5I","^2I","^5V","^5K","^5G","^5F","^5L","^5Q","^5D","^5X","^5M","^5C","^5N","^18","^64","^19","^5U","^62","^67","^5Y","^5O","^N","^20","^2N","^65","^5S","^63","^2J","^2L"]],"^1:","A simple, fast, monitoring profiler for Clojure/Script.\n\n  Usage: wrap+name interesting body exprs with the `p` macro. Then activate\n  profiling of these wrapped exprs using the `profiled` or `profile` macros:\n\n    (profiled {} (p :my-fn (my-fn))) ; Returns [<body-result> <?pstats>]\n    (profile  {} (p :my-fn (my-fn))) ; Returns  <body-result>, dispatches\n                                     ; ?pstats to any registered handlers.\n\n  Extensive facilities are provided for compile-time elision and runtime\n  filtering.\n\n  See the relevant docstrings for more info:\n    `p`, `profiled`, `profile`, `add-handler!` ; Core API\n\n    (p        [opts & body] [id & body]) ; e.g. `(p ::my-pid (do-work))`\n    (profiled [opts & body])             ; e.g. `(profiled {:level 2} (my-fn))`\n    (profile  [opts & body])             ; e.g. `(profiled {:level 2} (my-fn))`\n\n    (add-handler! [handler-id ns-pattern handler-fn])\n\n  How/where to use this library:\n    Tufte profiling is highly optimized: even without elision, you can usually\n    leave profiling enabled in production (e.g. for sampled profiling, or to\n    detect unusual performance behaviour). Tufte's stats maps are well suited\n    to programmatic monitoring.\n\n  Abbreviations, etc.\n    - form  id = pid = id given in `p`\n    - group id = gid = id given in `profile`"]