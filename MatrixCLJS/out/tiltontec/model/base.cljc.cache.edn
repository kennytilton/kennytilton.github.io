{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {c-md-name tiltontec.cell.base, are cljs.test, make-cell tiltontec.cell.core, caller-ensure tiltontec.cell.base, *not-to-be* tiltontec.cell.base, caller-drop tiltontec.cell.base, c-in tiltontec.cell.core, c-input? tiltontec.cell.base, c-synaptic? tiltontec.cell.base, c-value-state tiltontec.cell.base, c-optimized-away? tiltontec.cell.base, unbound tiltontec.cell.base, c?n tiltontec.cell.core, c-optimize tiltontec.cell.base, c-valid? tiltontec.cell.base, *causation* tiltontec.cell.base, *defer-changes* tiltontec.cell.base, c-pulse tiltontec.cell.base, observe tiltontec.cell.observer, is cljs.test, wtrx tiltontec.util.base, +pulse+ tiltontec.cell.base, c-pulse-last-changed tiltontec.cell.base, c-slots tiltontec.cell.base, c?+ tiltontec.cell.core, md-ref? tiltontec.cell.base, deftest cljs.test, rmap-meta-setf tiltontec.util.core, c-value tiltontec.cell.base, c-awaken tiltontec.cell.evaluate, with-integrity tiltontec.cell.integrity, mdead? tiltontec.cell.base, err tiltontec.util.core, c-get tiltontec.cell.evaluate, c-callers tiltontec.cell.base, c-ephemeral? tiltontec.cell.base, ia-type? tiltontec.cell.base, c-ref? tiltontec.cell.base, cells-init tiltontec.cell.base, c-model tiltontec.cell.base, c-pulse-observed tiltontec.cell.base, c?once tiltontec.cell.core, c-assert tiltontec.cell.base, def-rmap-slots tiltontec.util.base, ia-type tiltontec.cell.base, c-slot tiltontec.cell.base, type-of tiltontec.util.core, c-rule tiltontec.cell.base, c-reset! tiltontec.cell.core, unlink-from-callers tiltontec.cell.base, c? tiltontec.cell.core, c-formula? tiltontec.cell.base, c-me tiltontec.cell.base, *trx?* tiltontec.util.base, c-lazy tiltontec.cell.base, c-reset-next! tiltontec.cell.core, c-slot-name tiltontec.cell.base, trx tiltontec.util.base, md-slot-owning? tiltontec.cell.base, def-rmap-meta-slots tiltontec.util.base, c-useds tiltontec.cell.base, *call-stack* tiltontec.cell.base, *c-prop-depth* tiltontec.cell.base, c-unbound? tiltontec.cell.base, without-c-dependency tiltontec.cell.base, *depender* tiltontec.cell.base, pme tiltontec.model.macros, rmap-setf tiltontec.util.core, prog1 tiltontec.util.base, c-state tiltontec.cell.base}, :excludes #{}, :name tiltontec.model.base, :imports nil, :requires {tiltontec.cell.observer tiltontec.cell.observer, tiltontec.cell.base tiltontec.cell.base, tiltontec.util.core tiltontec.util.core, cty tiltontec.cell.base, cljs.test cljs.test, tiltontec.cell.evaluate tiltontec.cell.evaluate, tiltontec.cell.core tiltontec.cell.core, tiltontec.model.macros tiltontec.model.macros, tiltontec.util.base tiltontec.util.base, tiltontec.cell.integrity tiltontec.cell.integrity}, :cljs.spec/speced-vars [], :uses {c-md-name tiltontec.cell.base, make-cell tiltontec.cell.core, caller-ensure tiltontec.cell.base, *not-to-be* tiltontec.cell.base, caller-drop tiltontec.cell.base, c-in tiltontec.cell.core, c-input? tiltontec.cell.base, c-synaptic? tiltontec.cell.base, c-value-state tiltontec.cell.base, c-optimized-away? tiltontec.cell.base, unbound tiltontec.cell.base, c-optimize tiltontec.cell.base, c-valid? tiltontec.cell.base, *causation* tiltontec.cell.base, *defer-changes* tiltontec.cell.base, c-pulse tiltontec.cell.base, observe tiltontec.cell.observer, +pulse+ tiltontec.cell.base, c-pulse-last-changed tiltontec.cell.base, c-slots tiltontec.cell.base, md-ref? tiltontec.cell.base, rmap-meta-setf tiltontec.util.core, c-value tiltontec.cell.base, c-awaken tiltontec.cell.evaluate, mdead? tiltontec.cell.base, err tiltontec.util.core, c-get tiltontec.cell.evaluate, c-callers tiltontec.cell.base, c-ephemeral? tiltontec.cell.base, ia-type? tiltontec.cell.base, c-ref? tiltontec.cell.base, cells-init tiltontec.cell.base, c-model tiltontec.cell.base, c-pulse-observed tiltontec.cell.base, c-assert tiltontec.cell.base, ia-type tiltontec.cell.base, c-slot tiltontec.cell.base, type-of tiltontec.util.core, c-rule tiltontec.cell.base, c-reset! tiltontec.cell.core, unlink-from-callers tiltontec.cell.base, c-formula? tiltontec.cell.base, c-me tiltontec.cell.base, c-lazy tiltontec.cell.base, c-slot-name tiltontec.cell.base, md-slot-owning? tiltontec.cell.base, c-useds tiltontec.cell.base, *call-stack* tiltontec.cell.base, *c-prop-depth* tiltontec.cell.base, c-unbound? tiltontec.cell.base, *depender* tiltontec.cell.base, rmap-setf tiltontec.util.core, c-state tiltontec.cell.base}, :defs {md-name {:protocol-inline nil, :meta {:arglists (quote ([ref])), :file nil}, :name tiltontec.model.base/md-name, :variadic false, :file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/model/base.cljc", :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref]))}, md-state {:protocol-inline nil, :meta {:arglists (quote ([ref])), :file nil}, :name tiltontec.model.base/md-state, :variadic false, :file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/model/base.cljc", :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref]))}, md-cz {:protocol-inline nil, :meta {:arglists (quote ([ref])), :file nil}, :name tiltontec.model.base/md-cz, :variadic false, :file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/model/base.cljc", :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref]))}, md-cell {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/model/base.cljc", :line 49, :column 7, :end-line 49, :end-column 14, :arglists (quote ([me slot]))}, :name tiltontec.model.base/md-cell, :variadic false, :file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/model/base.cljc", :end-column 14, :method-params ([me slot]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([me slot]))}, md-awaken {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/model/base.cljc", :line 77, :column 7, :end-line 77, :end-column 16, :arglists (quote ([me])), :doc "(1) do initial evaluation of all ruled slots\n   (2) call observers of all slots"}, :name tiltontec.model.base/md-awaken, :variadic false, :file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/model/base.cljc", :end-column 16, :method-params ([me]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([me])), :doc "(1) do initial evaluation of all ruled slots\n   (2) call observers of all slots"}, md-install-cell {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/model/base.cljc", :line 56, :column 7, :end-line 56, :end-column 22, :arglists (quote ([me slot c]))}, :name tiltontec.model.base/md-install-cell, :variadic false, :file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/model/base.cljc", :end-column 22, :method-params ([me slot c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 3, :fn-var true, :arglists (quote ([me slot c]))}, md-awaken-before {:name tiltontec.model.base/md-awaken-before, :file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/model/base.cljc", :line 71, :column 1, :end-line 71, :end-column 27, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/model/base.cljc", :line 71, :column 11, :end-line 71, :end-column 27}, :tag cljs.core/MultiFn}}, :cljs.spec/registry-ref [], :require-macros {cljs.test cljs.test, tiltontec.util.base tiltontec.util.base, cty tiltontec.cell.base, tiltontec.cell.base tiltontec.cell.base, tiltontec.cell.integrity tiltontec.cell.integrity, tiltontec.cell.core tiltontec.cell.core, tiltontec.model.macros tiltontec.model.macros}, :cljs.analyzer/constants {:seen #{:awakening :slot :awake :cz :else :default :name :hunh :state :nascent :kids :not-found :md-awaken-noslot-obs :tag :me :hierarchy}, :order [:name :state :cz :slot :me :else :hierarchy :default :nascent :awakening :not-found :kids :tag :md-awaken-noslot-obs :hunh :awake]}, :doc nil}