{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name tiltontec.model.macros, :imports nil, :requires {tiltontec.cell.base tiltontec.cell.base}, :cljs.spec/speced-vars [], :uses {ia-type tiltontec.cell.base}, :defs {pme {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/model/macros.cljc", :line 5, :column 11, :end-line 5, :end-column 14, :macro true, :arglists (quote ([& mas])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env mas)], :arglists ([&form &env & mas]), :arglists-meta (nil)}}, :name tiltontec.model.macros/pme, :variadic true, :file "src/tiltontec/model/macros.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env mas)], :arglists ([&form &env & mas]), :arglists-meta (nil)}, :method-params [(&form &env mas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 5, :macro true, :end-line 5, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & mas])}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{cljs.core/when me cljs.core/deref :name tiltontec.cell.base/ia-type cljs.core/println :tag}, :order [cljs.core/when cljs.core/println tiltontec.cell.base/ia-type me :tag cljs.core/deref :name]}, :doc nil}