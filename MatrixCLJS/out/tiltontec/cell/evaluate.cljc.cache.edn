{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {c-md-name tiltontec.cell.base, set-ify tiltontec.util.core, caller-ensure tiltontec.cell.base, *not-to-be* tiltontec.cell.base, caller-drop tiltontec.cell.base, c-input? tiltontec.cell.base, c-synaptic? tiltontec.cell.base, pcell tiltontec.cell.base, c-value-state tiltontec.cell.base, c-optimized-away? tiltontec.cell.base, c-current? tiltontec.cell.integrity, c-optimize tiltontec.cell.base, *one-pulse?* tiltontec.cell.integrity, c-valid? tiltontec.cell.base, any-ref? tiltontec.util.core, *causation* tiltontec.cell.base, *defer-changes* tiltontec.cell.base, c-pulse tiltontec.cell.base, wtrx tiltontec.util.base, +pulse+ tiltontec.cell.base, c-pulse-last-changed tiltontec.cell.base, md-ref? tiltontec.cell.base, rmap-meta-setf tiltontec.util.core, c-value tiltontec.cell.base, with-integrity tiltontec.cell.integrity, mdead? tiltontec.cell.base, err tiltontec.util.core, c-callers tiltontec.cell.base, c-ephemeral? tiltontec.cell.base, c-ref? tiltontec.cell.base, c-model tiltontec.cell.base, c-pulse-observed tiltontec.cell.base, ia-type tiltontec.cell.base, c-slot tiltontec.cell.base, c-rule tiltontec.cell.base, unlink-from-callers tiltontec.cell.base, c-formula? tiltontec.cell.base, c-me tiltontec.cell.base, c-lazy tiltontec.cell.base, difference clojure.set, c-slot-name tiltontec.cell.base, trx tiltontec.util.base, md-slot-owning? tiltontec.cell.base, c-useds tiltontec.cell.base, *call-stack* tiltontec.cell.base, *c-prop-depth* tiltontec.cell.base, c-pulse-update tiltontec.cell.integrity, c-unbound? tiltontec.cell.base, without-c-dependency tiltontec.cell.base, *depender* tiltontec.cell.base, rmap-setf tiltontec.util.core, prog1 tiltontec.util.base, c-state tiltontec.cell.base}, :excludes #{}, :name tiltontec.cell.evaluate, :imports nil, :requires {clojure.set clojure.set, tiltontec.util.base tiltontec.util.base, tiltontec.util.core tiltontec.util.core, cty tiltontec.cell.base, tiltontec.cell.base tiltontec.cell.base, tiltontec.cell.observer tiltontec.cell.observer, tiltontec.cell.integrity tiltontec.cell.integrity}, :cljs.spec/speced-vars [], :uses {c-md-name tiltontec.cell.base, set-ify tiltontec.util.core, caller-ensure tiltontec.cell.base, *not-to-be* tiltontec.cell.base, caller-drop tiltontec.cell.base, c-input? tiltontec.cell.base, c-synaptic? tiltontec.cell.base, c-value-state tiltontec.cell.base, c-optimized-away? tiltontec.cell.base, c-current? tiltontec.cell.integrity, c-optimize tiltontec.cell.base, *one-pulse?* tiltontec.cell.integrity, c-valid? tiltontec.cell.base, any-ref? tiltontec.util.core, *causation* tiltontec.cell.base, *defer-changes* tiltontec.cell.base, c-pulse tiltontec.cell.base, +pulse+ tiltontec.cell.base, c-pulse-last-changed tiltontec.cell.base, md-ref? tiltontec.cell.base, rmap-meta-setf tiltontec.util.core, c-value tiltontec.cell.base, mdead? tiltontec.cell.base, err tiltontec.util.core, c-callers tiltontec.cell.base, c-ephemeral? tiltontec.cell.base, c-ref? tiltontec.cell.base, c-model tiltontec.cell.base, c-pulse-observed tiltontec.cell.base, ia-type tiltontec.cell.base, c-slot tiltontec.cell.base, c-rule tiltontec.cell.base, c-observe tiltontec.cell.observer, unlink-from-callers tiltontec.cell.base, c-formula? tiltontec.cell.base, c-me tiltontec.cell.base, c-lazy tiltontec.cell.base, difference clojure.set, c-slot-name tiltontec.cell.base, md-slot-owning? tiltontec.cell.base, c-useds tiltontec.cell.base, *call-stack* tiltontec.cell.base, *c-prop-depth* tiltontec.cell.base, c-pulse-update tiltontec.cell.integrity, c-unbound? tiltontec.cell.base, *depender* tiltontec.cell.base, rmap-setf tiltontec.util.core, c-state tiltontec.cell.base}, :defs {calculate-and-set {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 160, :column 7, :end-line 160, :end-column 24, :arglists (quote ([c dbgid dbgdata])), :doc "Calculate, link, record, and propagate."}, :name tiltontec.cell.evaluate/calculate-and-set, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 24, :method-params ([c dbgid dbgdata]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 3, :fn-var true, :arglists (quote ([c dbgid dbgdata])), :doc "Calculate, link, record, and propagate."}, c-quiesce {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 365, :column 7, :end-line 365, :end-column 16, :arglists (quote ([c]))}, :name tiltontec.cell.evaluate/c-quiesce, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 365, :end-line 365, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, c-absorb-value {:name tiltontec.cell.evaluate/c-absorb-value, :file "src/tiltontec/cell/evaluate.cljc", :line 229, :column 1, :end-line 229, :end-column 24, :declared true, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 229, :column 10, :end-line 229, :end-column 24, :declared true}}, md-slot-cell-flushed {:name tiltontec.cell.evaluate/md-slot-cell-flushed, :file "src/tiltontec/cell/evaluate.cljc", :line 412, :column 1, :end-line 414, :end-column 30, :declared true, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 414, :column 10, :end-line 414, :end-column 30, :declared true}}, unlink-from-used {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 302, :column 7, :end-line 302, :end-column 23, :arglists (quote ([c why]))}, :name tiltontec.cell.evaluate/unlink-from-used, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 23, :method-params ([c why]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c why]))}, unchanged-test {:name tiltontec.cell.evaluate/unchanged-test, :file "src/tiltontec/cell/evaluate.cljc", :line 390, :column 1, :end-line 390, :end-column 25, :doc "Cells does not propagate when nothing changes. By default, the\n  test is =, but cells can inject a different test, and when we get\n  to models it will be possible for a slot to have associated\n  with it a different test.", :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 390, :column 11, :end-line 390, :end-column 25, :doc "Cells does not propagate when nothing changes. By default, the\n  test is =, but cells can inject a different test, and when we get\n  to models it will be possible for a slot to have associated\n  with it a different test."}, :tag cljs.core/MultiFn}, record-dependency {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 49, :column 7, :end-line 49, :end-column 24, :arglists (quote ([used]))}, :name tiltontec.cell.evaluate/record-dependency, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 24, :method-params ([used]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([used]))}, ephemeral-reset {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 32, :column 7, :end-line 32, :end-column 22, :arglists (quote ([rc]))}, :name tiltontec.cell.evaluate/ephemeral-reset, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 22, :method-params ([rc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rc]))}, optimize-away?! {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 323, :column 7, :end-line 323, :end-column 22, :arglists (quote ([c prior-value])), :doc "Optimizes away cells who turn out not to depend on anyone, \n  saving a lot of work at runtime. A caller/user will not bother\n  establishing a link, and when we get to models cget will \n  find a non-cell in a slot and Just Use It."}, :name tiltontec.cell.evaluate/optimize-away?!, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 22, :method-params ([c prior-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c prior-value])), :doc "Optimizes away cells who turn out not to depend on anyone, \n  saving a lot of work at runtime. A caller/user will not bother\n  establishing a link, and when we get to models cget will \n  find a non-cell in a slot and Just Use It."}, ensure-value-is-current {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 59, :column 7, :end-line 59, :end-column 30, :arglists (quote ([c debug-id ensurer])), :doc "The key to data integrity: recursively check the known dependency\n  graph to decide if we are current, and if not kick off recalculation\n  and propagation."}, :name tiltontec.cell.evaluate/ensure-value-is-current, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 30, :method-params ([c debug-id ensurer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 3, :fn-var true, :arglists (quote ([c debug-id ensurer])), :doc "The key to data integrity: recursively check the known dependency\n  graph to decide if we are current, and if not kick off recalculation\n  and propagation."}, propagate {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 416, :column 7, :end-line 416, :end-column 16, :arglists (quote ([c prior-value callers])), :doc "A cell:\n  - notifies its callers of its change;\n  - calls any observer; and\n  - if ephemeral, silently reverts to nil."}, :name tiltontec.cell.evaluate/propagate, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 16, :method-params ([c prior-value callers]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 416, :end-line 416, :max-fixed-arity 3, :fn-var true, :arglists (quote ([c prior-value callers])), :doc "A cell:\n  - notifies its callers of its change;\n  - calls any observer; and\n  - if ephemeral, silently reverts to nil."}, md-cell-flush {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 311, :column 7, :end-line 311, :end-column 20, :arglists (quote ([c]))}, :name tiltontec.cell.evaluate/md-cell-flush, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 20, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 311, :end-line 311, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, c-awaken {:name tiltontec.cell.evaluate/c-awaken, :file "src/tiltontec/cell/evaluate.cljc", :line 192, :column 1, :end-line 192, :end-column 19, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 192, :column 11, :end-line 192, :end-column 19}, :tag cljs.core/MultiFn}, c-get {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 120, :column 7, :end-line 120, :end-column 12, :arglists (quote ([c])), :doc "The API for determing the value associated with a Cell.\n  Ensures value is current, records any dependent, and\n  notices if a standalone  cell has never been observed."}, :name tiltontec.cell.evaluate/c-get, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 12, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "The API for determing the value associated with a Cell.\n  Ensures value is current, records any dependent, and\n  notices if a standalone  cell has never been observed."}, not-to-be-self {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 373, :column 7, :end-line 373, :end-column 21, :arglists (quote ([me]))}, :name tiltontec.cell.evaluate/not-to-be-self, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 21, :method-params ([me]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 373, :end-line 373, :max-fixed-arity 1, :fn-var true, :arglists (quote ([me]))}, c-value-assume {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 241, :column 7, :end-line 241, :end-column 21, :arglists (quote ([c new-value propagation-code])), :doc "The Cell assumes a new value at awakening, on c-reset!, or\n   after formula recalculation.\n\n  We record the new value, set the Cell state to :awake, make\n  its pulse current, check to see if a formula cell can be\n  optimized away, and then propagate to any dependent formula\n  cells."}, :name tiltontec.cell.evaluate/c-value-assume, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 21, :method-params ([c new-value propagation-code]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 3, :fn-var true, :arglists (quote ([c new-value propagation-code])), :doc "The Cell assumes a new value at awakening, on c-reset!, or\n   after formula recalculation.\n\n  We record the new value, set the Cell state to :awake, make\n  its pulse current, check to see if a formula cell can be\n  optimized away, and then propagate to any dependent formula\n  cells."}, not-to-be {:name tiltontec.cell.evaluate/not-to-be, :file "src/tiltontec/cell/evaluate.cljc", :line 380, :column 1, :end-line 380, :end-column 20, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 380, :column 11, :end-line 380, :end-column 20}, :tag cljs.core/MultiFn}, md-slot-value-store {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 235, :column 7, :end-line 235, :end-column 26, :arglists (quote ([me slot value]))}, :name tiltontec.cell.evaluate/md-slot-value-store, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 26, :method-params ([me slot value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 3, :fn-var true, :arglists (quote ([me slot value]))}, calculate-and-link {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 177, :column 7, :end-line 177, :end-column 25, :arglists (quote ([c])), :doc "The name is accurate: we do no more than invoke the\n  rule of a formula and return its value, but along the\n  way the links between dependencies and dependents get\n  determined anew."}, :name tiltontec.cell.evaluate/calculate-and-link, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 25, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "The name is accurate: we do no more than invoke the\n  rule of a formula and return its value, but along the\n  way the links between dependencies and dependents get\n  determined anew."}, c-value-changed? {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 403, :column 7, :end-line 403, :end-column 23, :arglists (quote ([c new-value old-value]))}, :name tiltontec.cell.evaluate/c-value-changed?, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 23, :method-params ([c new-value old-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 403, :end-line 403, :max-fixed-arity 3, :fn-var true, :arglists (quote ([c new-value old-value]))}, propagate-to-callers {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 477, :column 7, :end-line 477, :end-column 27, :arglists (quote ([c callers]))}, :name tiltontec.cell.evaluate/propagate-to-callers, :variadic false, :file "src/tiltontec/cell/evaluate.cljc", :end-column 27, :method-params ([c callers]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 477, :end-line 477, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c callers]))}, *custom-propagater* {:name tiltontec.cell.evaluate/*custom-propagater*, :file "src/tiltontec/cell/evaluate.cljc", :line 410, :column 1, :end-line 410, :end-column 35, :dynamic true, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/evaluate.cljc", :line 410, :column 16, :end-line 410, :end-column 35, :dynamic true}, :tag clj-nil}}, :cljs.spec/registry-ref [], :require-macros {tiltontec.util.base tiltontec.util.base, cty tiltontec.cell.base, tiltontec.cell.base tiltontec.cell.base, tiltontec.cell.integrity tiltontec.cell.integrity}, :cljs.analyzer/constants {:seen #{:callers :valid :not2be-default :optimized-away :caller :slot :awake :c-read :cells-flushed :cz :pre-rule-clear :ephemeral-reset :dead :opti-used :else :unchanged-if :no-propagate :uncurrent :quiesced :evaluate-ok :default :c-awaken-fall-thru :propagate :nested :value :type :state :slotv-assume :fn-c-awaken :nascent :wtf :evic :ref-of :not-propping :tiltontec.cell.base/c-formula :pulse-last-changed :tell-dependents :id :unref :cget :useds :tiltontec.cell.base/cell :quiesce :when-value-t :cell-awaken :reco-dep!!! :dead-c :once-asked :me :hierarchy :opti-away :valid-uninfluenced :always :to :used}, :order [:ephemeral-reset :me :slot :value :reco-dep!!! :used :caller :useds :when-value-t :nested :evic :else :valid-uninfluenced :c-read :nascent :state :awake :cget :pre-rule-clear :hierarchy :type :default :c-awaken-fall-thru :ref-of :unref :tiltontec.cell.base/cell :cell-awaken :tiltontec.cell.base/c-formula :fn-c-awaken :slotv-assume :propagate :valid :uncurrent :wtf :no-propagate :callers :cells-flushed :optimized-away :opti-away :cz :opti-used :quiesce :dead-c :dead :not2be-default :id :unchanged-if :pulse-last-changed :once-asked :always :tell-dependents :quiesced :not-propping :to :evaluate-ok]}, :doc nil}