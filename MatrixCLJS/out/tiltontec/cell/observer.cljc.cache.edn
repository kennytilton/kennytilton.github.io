{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {c-md-name tiltontec.cell.base, fifo-add tiltontec.util.core, set-ify tiltontec.util.core, wtrx-test tiltontec.util.core, cl-find tiltontec.util.core, unbound tiltontec.cell.base, any-ref? tiltontec.util.core, +pulse+ tiltontec.cell.base, ia-ref tiltontec.util.core, md-ref? tiltontec.cell.base, fifo-pop tiltontec.util.core, c-value tiltontec.cell.base, err tiltontec.util.core, c-ref? tiltontec.cell.base, fifo-empty? tiltontec.util.core, c-model tiltontec.cell.base, c-slot tiltontec.cell.base, fifo-peek tiltontec.util.core, fifo-data tiltontec.util.core, trx tiltontec.util.base, pme tiltontec.model.macros, rmap-setf tiltontec.util.core, make-fifo-queue tiltontec.util.core}, :excludes #{}, :name tiltontec.cell.observer, :imports nil, :requires {tiltontec.util.base tiltontec.util.base, ut tiltontec.util.core, tiltontec.util.core tiltontec.util.core, cty tiltontec.cell.base, tiltontec.cell.base tiltontec.cell.base, tiltontec.model.macros tiltontec.model.macros}, :cljs.spec/speced-vars [], :uses {c-md-name tiltontec.cell.base, fifo-add tiltontec.util.core, set-ify tiltontec.util.core, wtrx-test tiltontec.util.core, cl-find tiltontec.util.core, unbound tiltontec.cell.base, any-ref? tiltontec.util.core, +pulse+ tiltontec.cell.base, ia-ref tiltontec.util.core, md-ref? tiltontec.cell.base, fifo-pop tiltontec.util.core, c-value tiltontec.cell.base, err tiltontec.util.core, c-ref? tiltontec.cell.base, fifo-empty? tiltontec.util.core, c-model tiltontec.cell.base, c-slot tiltontec.cell.base, fifo-peek tiltontec.util.core, fifo-data tiltontec.util.core, rmap-setf tiltontec.util.core, make-fifo-queue tiltontec.util.core}, :defs {type-cljc {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/observer.cljc", :line 25, :column 7, :end-line 25, :end-column 16, :arglists (quote ([x]))}, :name tiltontec.cell.observer/type-cljc, :variadic false, :file "src/tiltontec/cell/observer.cljc", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, observe-by-type {:name tiltontec.cell.observer/observe-by-type, :file "src/tiltontec/cell/observer.cljc", :line 32, :column 1, :end-line 32, :end-column 26, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/observer.cljc", :line 32, :column 11, :end-line 32, :end-column 26}, :tag cljs.core/MultiFn}, observe {:name tiltontec.cell.observer/observe, :file "src/tiltontec/cell/observer.cljc", :line 39, :column 1, :end-line 39, :end-column 18, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/observer.cljc", :line 39, :column 11, :end-line 39, :end-column 18}, :tag cljs.core/MultiFn}, +observe-default-handler+ {:name tiltontec.cell.observer/+observe-default-handler+, :file "src/tiltontec/cell/observer.cljc", :line 42, :column 1, :end-line 42, :end-column 31, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/observer.cljc", :line 42, :column 6, :end-line 42, :end-column 31}, :tag any}, defobserver {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/observer.cljc", :line 52, :column 11, :end-line 52, :end-column 22, :macro true, :arglists (quote ([slot types params & body])), :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(&form &env slot types params body)], :arglists ([&form &env slot types params & body]), :arglists-meta (nil)}}, :name tiltontec.cell.observer/defobserver, :variadic true, :file "src/tiltontec/cell/observer.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(&form &env slot types params body)], :arglists ([&form &env slot types params & body]), :arglists-meta (nil)}, :method-params [(&form &env slot types params body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 52, :macro true, :end-line 52, :max-fixed-arity 5, :fn-var false, :arglists ([&form &env slot types params & body])}, fn-obs {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/observer.cljc", :line 65, :column 11, :end-line 65, :end-column 17, :macro true, :arglists (quote ([& body])), :doc "Shortcut definer for cell-specific observers.\nbody can be multiple sexprs with access to\ncall parameters: slot, me, new, old, and c.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name tiltontec.cell.observer/fn-obs, :variadic true, :file "src/tiltontec/cell/observer.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 65, :macro true, :end-line 65, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & body]), :doc "Shortcut definer for cell-specific observers.\nbody can be multiple sexprs with access to\ncall parameters: slot, me, new, old, and c."}, c-observe {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/observer.cljc", :line 73, :column 7, :end-line 73, :end-column 16, :arglists (quote ([c why] [c prior-value why])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([c why] [c prior-value why]), :arglists ([c why] [c prior-value why]), :arglists-meta (nil nil)}}, :name tiltontec.cell.observer/c-observe, :variadic false, :file "src/tiltontec/cell/observer.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([c why] [c prior-value why]), :arglists ([c why] [c prior-value why]), :arglists-meta (nil nil)}, :method-params ([c why] [c prior-value why]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 3, :fn-var true, :arglists ([c why] [c prior-value why])}}, :cljs.spec/registry-ref [], :require-macros {tiltontec.util.base tiltontec.util.base, tiltontec.model.macros tiltontec.model.macros}, :cljs.analyzer/constants {:seen #{me old new-value :default slot :obs :type new :pulse-observed old-value :tiltontec.cell.base/model cljs.core/fn cljs.core/defmethod tiltontec.cell.observer/observe c :hierarchy}, :order [:type :hierarchy :default :tiltontec.cell.base/model me new-value old-value c cljs.core/defmethod tiltontec.cell.observer/observe slot cljs.core/fn new old :pulse-observed :obs]}, :doc nil}