{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{empty resolve}, :name bide.core, :imports {Html5History goog.history.Html5History, EventType goog.history.EventType}, :requires {helpers bide.impl.helpers, Html5History goog.history.Html5History, bide.impl.helpers bide.impl.helpers, EventType goog.history.EventType, bide.impl.router bide.impl.router, e goog.events, rtr bide.impl.router, str clojure.string, clojure.string clojure.string, goog.events goog.events}, :cljs.spec/speced-vars [], :uses nil, :defs {match {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 102, :column 7, :end-line 102, :end-column 12, :arglists (quote ([router path])), :doc "Try to match a path to a specific route in the router, returns `nil`\n  if the no match is found."}, :name bide.core/match, :variadic false, :file "out/bide/core.cljs", :end-column 12, :method-params ([router path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([router path])), :doc "Try to match a path to a specific route in the router, returns `nil`\n  if the no match is found."}, start! {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 135, :column 7, :end-line 135, :end-column 13, :arglists (quote ([router {:keys [on-navigate default html5? html5history], :or {html5? false}, :as opts}])), :doc "Starts the bide routing handling using the `goog.history.Html5History` API as\n  browser history event watching mechanism.\n\n  Accepts router and configuration map. Required configuration keys are\n  `:on-navigate` and `:default`. `:on-navigate` is a function that would be\n  called each time route is changed providing route id, params and query as\n  arguments. `:default` used as default route id when URL doesn't match any\n  route registered in router. Optional configuration keys are `:html5?` (`false`\n  by default) and `:html5history` (new `goog.history.Html5History` instance by\n  default). Passing anything that evaluates to logical false as value of\n  `:html5?` would configure history to use fragment to store token. Pass factory\n  function that returns instance of `goog.history.Html5History` to\n  `:html5history` when you need to do some customizations to history instance\n  used to manage history events."}, :name bide.core/start!, :variadic false, :file "out/bide/core.cljs", :end-column 13, :method-params ([router p__11293]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 2, :fn-var true, :arglists (quote ([router {:keys [on-navigate default html5? html5history], :or {html5? false}, :as opts}])), :doc "Starts the bide routing handling using the `goog.history.Html5History` API as\n  browser history event watching mechanism.\n\n  Accepts router and configuration map. Required configuration keys are\n  `:on-navigate` and `:default`. `:on-navigate` is a function that would be\n  called each time route is changed providing route id, params and query as\n  arguments. `:default` used as default route id when URL doesn't match any\n  route registered in router. Optional configuration keys are `:html5?` (`false`\n  by default) and `:html5history` (new `goog.history.Html5History` instance by\n  default). Passing anything that evaluates to logical false as value of\n  `:html5?` would configure history to use fragment to store token. Pass factory\n  function that returns instance of `goog.history.Html5History` to\n  `:html5history` when you need to do some customizations to history instance\n  used to manage history events."}, IRouter {:meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 36, :column 14, :end-line 36, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-navigate [[_ loc params query]], -replace [[_ loc params query]]}}}, :protocol-symbol true, :name bide.core/IRouter, :file "out/bide/core.cljs", :end-column 21, :column 1, :line 36, :protocol-info {:methods {-navigate [[_ loc params query]], -replace [[_ loc params query]]}}, :info nil, :end-line 36, :tag any, :impls #{x11304}, :doc nil, :jsdoc ("@interface")}, insert {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 97, :column 7, :end-line 97, :end-column 13, :arglists (quote ([router path name])), :doc "Insert a new entry to the router."}, :name bide.core/insert, :variadic false, :file "out/bide/core.cljs", :end-column 13, :method-params ([router path name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 3, :fn-var true, :arglists (quote ([router path name])), :doc "Insert a new entry to the router."}, router {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 112, :column 7, :end-line 112, :end-column 13, :arglists (quote ([routes])), :doc "A helper for compile a vector of routes in a router instance."}, :name bide.core/router, :variadic false, :file "out/bide/core.cljs", :end-column 13, :method-params ([routes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([routes])), :doc "A helper for compile a vector of routes in a router instance."}, -repr {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 42, :column 4, :end-line 42, :end-column 9, :protocol bide.core/IPathRepr, :doc "Return a representation of object in path.", :arglists (quote ([_]))}, :protocol bide.core/IPathRepr, :name bide.core/-repr, :variadic false, :file "out/bide/core.cljs", :end-column 9, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Return a representation of object in path."}, -navigate {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 37, :column 4, :end-line 37, :end-column 13, :protocol bide.core/IRouter, :doc nil, :arglists (quote ([_ loc params query]))}, :protocol bide.core/IRouter, :name bide.core/-navigate, :variadic false, :file "out/bide/core.cljs", :end-column 13, :method-params ([_ loc params query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 37, :max-fixed-arity 4, :fn-var true, :arglists (quote ([_ loc params query])), :doc nil}, -replace {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 38, :column 4, :end-line 38, :end-column 12, :protocol bide.core/IRouter, :doc nil, :arglists (quote ([_ loc params query]))}, :protocol bide.core/IRouter, :name bide.core/-replace, :variadic false, :file "out/bide/core.cljs", :end-column 12, :method-params ([_ loc params query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 38, :max-fixed-arity 4, :fn-var true, :arglists (quote ([_ loc params query])), :doc nil}, navigate! {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 195, :column 7, :end-line 195, :end-column 16, :arglists (quote ([router id] [router id params] [router id params query])), :doc "Trigger a navigate event to a specific location.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([router id] [router id params] [router id params query]), :arglists ([router id] [router id params] [router id params query]), :arglists-meta (nil nil nil)}}, :name bide.core/navigate!, :variadic false, :file "out/bide/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([router id] [router id params] [router id params query]), :arglists ([router id] [router id params] [router id params query]), :arglists-meta (nil nil nil)}, :method-params ([router id] [router id params] [router id params query]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 4, :fn-var true, :arglists ([router id] [router id params] [router id params query]), :doc "Trigger a navigate event to a specific location."}, js->props {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 75, :column 8, :end-line 75, :end-column 17, :private true, :arglists (quote ([params]))}, :private true, :name bide.core/js->props, :variadic false, :file "out/bide/core.cljs", :end-column 17, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params]))}, empty {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 92, :column 7, :end-line 92, :end-column 12, :arglists (quote ([])), :doc "Construct an empty router."}, :name bide.core/empty, :variadic false, :file "out/bide/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Construct an empty router."}, IPathRepr {:meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 40, :column 14, :end-line 40, :end-column 23, :doc "Path parameters coercion protocol.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-repr [[_]]}}}, :protocol-symbol true, :name bide.core/IPathRepr, :file "out/bide/core.cljs", :end-column 23, :column 1, :line 40, :protocol-info {:methods {-repr [[_]]}}, :info nil, :end-line 40, :tag any, :impls #{nil object cljs/core.Keyword number cljs/core.PersistentVector string}, :doc "Path parameters coercion protocol.", :jsdoc ("@interface")}, replace! {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 203, :column 7, :end-line 203, :end-column 15, :arglists (quote ([router id] [router id params] [router id params query])), :doc "Trigger a replace event to a specific location.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([router id] [router id params] [router id params query]), :arglists ([router id] [router id params] [router id params query]), :arglists-meta (nil nil nil)}}, :name bide.core/replace!, :variadic false, :file "out/bide/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([router id] [router id params] [router id params query]), :arglists ([router id] [router id params] [router id params query]), :arglists-meta (nil nil nil)}, :method-params ([router id] [router id params] [router id params query]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 4, :fn-var true, :arglists ([router id] [router id params] [router id params query]), :doc "Trigger a replace event to a specific location."}, resolve {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 121, :column 7, :end-line 121, :end-column 14, :arglists (quote ([router name] [router name params] [router name params query])), :doc "Perform a url resolve operation.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([router name] [router name params] [router name params query]), :arglists ([router name] [router name params] [router name params query]), :arglists-meta (nil nil nil)}}, :name bide.core/resolve, :variadic false, :file "out/bide/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([router name] [router name params] [router name params query]), :arglists ([router name] [router name params] [router name params query]), :arglists-meta (nil nil nil)}, :method-params ([router name] [router name params] [router name params query]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 4, :fn-var true, :arglists ([router name] [router name params] [router name params query]), :doc "Perform a url resolve operation."}, router? {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 87, :column 16, :end-line 87, :end-column 23, :tag boolean, :arglists (quote ([v])), :doc "Check if the `v` is a Router instance."}, :name bide.core/router?, :variadic false, :file "out/bide/core.cljs", :end-column 23, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :ret-tag boolean, :end-line 87, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([v])), :doc "Check if the `v` is a Router instance."}, props->js {:protocol-inline nil, :meta {:file "/Users/kennetht2/todoFRP/todo/MatrixCLJS/out/bide/core.cljs", :line 66, :column 8, :end-line 66, :end-column 17, :private true, :arglists (quote ([params]))}, :private true, :name bide.core/props->js, :variadic false, :file "out/bide/core.cljs", :end-column 17, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:html5history :default :html5? :on-navigate}, :order [:on-navigate :default :html5? :html5history]}, :doc nil}